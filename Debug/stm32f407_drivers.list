
stm32f407_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015c4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08001754  08001754  00002754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080017a4  080017a4  0000305c  2**0
                  CONTENTS
  4 .ARM          00000008  080017a4  080017a4  000027a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080017ac  080017ac  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017ac  080017ac  000027ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080017b0  080017b0  000027b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080017b4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000305c  2**0
                  CONTENTS
 10 .bss          0000016c  2000005c  2000005c  0000305c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c8  200001c8  0000305c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001237  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000536  00000000  00000000  000042c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000180  00000000  00000000  00004800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000010a  00000000  00000000  00004980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003213  00000000  00000000  00004a8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001c4b  00000000  00000000  00007c9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000afbc  00000000  00000000  000098e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000148a4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000ce8  00000000  00000000  000148e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  000155d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800173c 	.word	0x0800173c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	0800173c 	.word	0x0800173c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <GPIO_CLK>:
 *@return					: None
 *
 *@note						: None
 *
 */
void GPIO_CLK(GPIO_RegDef_t *pGPIO, uint8_t EnorDis){
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	460b      	mov	r3, r1
 800027a:	70fb      	strb	r3, [r7, #3]
	if(EnorDis){ // if enable clk
 800027c:	78fb      	ldrb	r3, [r7, #3]
 800027e:	2b00      	cmp	r3, #0
 8000280:	d062      	beq.n	8000348 <GPIO_CLK+0xd8>
		if(pGPIO == GPIOA) 			// pointer point to the base address of GPIO (look at stm32f407xx.h for more info) 205-215
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	4a64      	ldr	r2, [pc, #400]	@ (8000418 <GPIO_CLK+0x1a8>)
 8000286:	4293      	cmp	r3, r2
 8000288:	d106      	bne.n	8000298 <GPIO_CLK+0x28>
			GPIOA_CLK_EN();			// Macros stm32f407xx.h 228 to 238
 800028a:	4b64      	ldr	r3, [pc, #400]	@ (800041c <GPIO_CLK+0x1ac>)
 800028c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800028e:	4a63      	ldr	r2, [pc, #396]	@ (800041c <GPIO_CLK+0x1ac>)
 8000290:	f043 0301 	orr.w	r3, r3, #1
 8000294:	6313      	str	r3, [r2, #48]	@ 0x30
		else if(pGPIO == GPIOH)
			GPIOH_CLK_DIS();
		else if(pGPIO == GPIOI)
			GPIOI_CLK_DIS();
	}
}
 8000296:	e0b9      	b.n	800040c <GPIO_CLK+0x19c>
		else if(pGPIO == GPIOB)
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	4a61      	ldr	r2, [pc, #388]	@ (8000420 <GPIO_CLK+0x1b0>)
 800029c:	4293      	cmp	r3, r2
 800029e:	d106      	bne.n	80002ae <GPIO_CLK+0x3e>
			GPIOB_CLK_EN();
 80002a0:	4b5e      	ldr	r3, [pc, #376]	@ (800041c <GPIO_CLK+0x1ac>)
 80002a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002a4:	4a5d      	ldr	r2, [pc, #372]	@ (800041c <GPIO_CLK+0x1ac>)
 80002a6:	f043 0302 	orr.w	r3, r3, #2
 80002aa:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002ac:	e0ae      	b.n	800040c <GPIO_CLK+0x19c>
		else if(pGPIO == GPIOC)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	4a5c      	ldr	r2, [pc, #368]	@ (8000424 <GPIO_CLK+0x1b4>)
 80002b2:	4293      	cmp	r3, r2
 80002b4:	d106      	bne.n	80002c4 <GPIO_CLK+0x54>
			GPIOC_CLK_EN();
 80002b6:	4b59      	ldr	r3, [pc, #356]	@ (800041c <GPIO_CLK+0x1ac>)
 80002b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ba:	4a58      	ldr	r2, [pc, #352]	@ (800041c <GPIO_CLK+0x1ac>)
 80002bc:	f043 0304 	orr.w	r3, r3, #4
 80002c0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002c2:	e0a3      	b.n	800040c <GPIO_CLK+0x19c>
		else if(pGPIO == GPIOD)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	4a58      	ldr	r2, [pc, #352]	@ (8000428 <GPIO_CLK+0x1b8>)
 80002c8:	4293      	cmp	r3, r2
 80002ca:	d106      	bne.n	80002da <GPIO_CLK+0x6a>
			GPIOD_CLK_EN();
 80002cc:	4b53      	ldr	r3, [pc, #332]	@ (800041c <GPIO_CLK+0x1ac>)
 80002ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002d0:	4a52      	ldr	r2, [pc, #328]	@ (800041c <GPIO_CLK+0x1ac>)
 80002d2:	f043 0308 	orr.w	r3, r3, #8
 80002d6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002d8:	e098      	b.n	800040c <GPIO_CLK+0x19c>
		else if(pGPIO == GPIOE)
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	4a53      	ldr	r2, [pc, #332]	@ (800042c <GPIO_CLK+0x1bc>)
 80002de:	4293      	cmp	r3, r2
 80002e0:	d106      	bne.n	80002f0 <GPIO_CLK+0x80>
			GPIOE_CLK_EN();
 80002e2:	4b4e      	ldr	r3, [pc, #312]	@ (800041c <GPIO_CLK+0x1ac>)
 80002e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002e6:	4a4d      	ldr	r2, [pc, #308]	@ (800041c <GPIO_CLK+0x1ac>)
 80002e8:	f043 0310 	orr.w	r3, r3, #16
 80002ec:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002ee:	e08d      	b.n	800040c <GPIO_CLK+0x19c>
		else if(pGPIO == GPIOF)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	4a4f      	ldr	r2, [pc, #316]	@ (8000430 <GPIO_CLK+0x1c0>)
 80002f4:	4293      	cmp	r3, r2
 80002f6:	d106      	bne.n	8000306 <GPIO_CLK+0x96>
			GPIOF_CLK_EN();
 80002f8:	4b48      	ldr	r3, [pc, #288]	@ (800041c <GPIO_CLK+0x1ac>)
 80002fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002fc:	4a47      	ldr	r2, [pc, #284]	@ (800041c <GPIO_CLK+0x1ac>)
 80002fe:	f043 0320 	orr.w	r3, r3, #32
 8000302:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000304:	e082      	b.n	800040c <GPIO_CLK+0x19c>
		else if(pGPIO == GPIOG)
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	4a4a      	ldr	r2, [pc, #296]	@ (8000434 <GPIO_CLK+0x1c4>)
 800030a:	4293      	cmp	r3, r2
 800030c:	d106      	bne.n	800031c <GPIO_CLK+0xac>
			GPIOG_CLK_EN();
 800030e:	4b43      	ldr	r3, [pc, #268]	@ (800041c <GPIO_CLK+0x1ac>)
 8000310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000312:	4a42      	ldr	r2, [pc, #264]	@ (800041c <GPIO_CLK+0x1ac>)
 8000314:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000318:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800031a:	e077      	b.n	800040c <GPIO_CLK+0x19c>
		else if(pGPIO == GPIOH)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	4a46      	ldr	r2, [pc, #280]	@ (8000438 <GPIO_CLK+0x1c8>)
 8000320:	4293      	cmp	r3, r2
 8000322:	d106      	bne.n	8000332 <GPIO_CLK+0xc2>
			GPIOH_CLK_EN();
 8000324:	4b3d      	ldr	r3, [pc, #244]	@ (800041c <GPIO_CLK+0x1ac>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000328:	4a3c      	ldr	r2, [pc, #240]	@ (800041c <GPIO_CLK+0x1ac>)
 800032a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800032e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000330:	e06c      	b.n	800040c <GPIO_CLK+0x19c>
		else if(pGPIO == GPIOI)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	4a41      	ldr	r2, [pc, #260]	@ (800043c <GPIO_CLK+0x1cc>)
 8000336:	4293      	cmp	r3, r2
 8000338:	d168      	bne.n	800040c <GPIO_CLK+0x19c>
			GPIOI_CLK_EN();
 800033a:	4b38      	ldr	r3, [pc, #224]	@ (800041c <GPIO_CLK+0x1ac>)
 800033c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800033e:	4a37      	ldr	r2, [pc, #220]	@ (800041c <GPIO_CLK+0x1ac>)
 8000340:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000344:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000346:	e061      	b.n	800040c <GPIO_CLK+0x19c>
		if(pGPIO == GPIOA) 			// pointer point to the base address of GPIO (look at stm32f407xx.h for more info) 205-215
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	4a33      	ldr	r2, [pc, #204]	@ (8000418 <GPIO_CLK+0x1a8>)
 800034c:	4293      	cmp	r3, r2
 800034e:	d106      	bne.n	800035e <GPIO_CLK+0xee>
			GPIOA_CLK_DIS();			// Macros stm32f407xx.h 277 to 287
 8000350:	4b32      	ldr	r3, [pc, #200]	@ (800041c <GPIO_CLK+0x1ac>)
 8000352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000354:	4a31      	ldr	r2, [pc, #196]	@ (800041c <GPIO_CLK+0x1ac>)
 8000356:	f023 0301 	bic.w	r3, r3, #1
 800035a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800035c:	e056      	b.n	800040c <GPIO_CLK+0x19c>
		else if(pGPIO == GPIOB)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	4a2f      	ldr	r2, [pc, #188]	@ (8000420 <GPIO_CLK+0x1b0>)
 8000362:	4293      	cmp	r3, r2
 8000364:	d106      	bne.n	8000374 <GPIO_CLK+0x104>
			GPIOB_CLK_DIS();
 8000366:	4b2d      	ldr	r3, [pc, #180]	@ (800041c <GPIO_CLK+0x1ac>)
 8000368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800036a:	4a2c      	ldr	r2, [pc, #176]	@ (800041c <GPIO_CLK+0x1ac>)
 800036c:	f023 0302 	bic.w	r3, r3, #2
 8000370:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000372:	e04b      	b.n	800040c <GPIO_CLK+0x19c>
		else if(pGPIO == GPIOC)
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	4a2b      	ldr	r2, [pc, #172]	@ (8000424 <GPIO_CLK+0x1b4>)
 8000378:	4293      	cmp	r3, r2
 800037a:	d106      	bne.n	800038a <GPIO_CLK+0x11a>
			GPIOC_CLK_DIS();
 800037c:	4b27      	ldr	r3, [pc, #156]	@ (800041c <GPIO_CLK+0x1ac>)
 800037e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000380:	4a26      	ldr	r2, [pc, #152]	@ (800041c <GPIO_CLK+0x1ac>)
 8000382:	f023 0304 	bic.w	r3, r3, #4
 8000386:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000388:	e040      	b.n	800040c <GPIO_CLK+0x19c>
		else if(pGPIO == GPIOD)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	4a26      	ldr	r2, [pc, #152]	@ (8000428 <GPIO_CLK+0x1b8>)
 800038e:	4293      	cmp	r3, r2
 8000390:	d106      	bne.n	80003a0 <GPIO_CLK+0x130>
			GPIOD_CLK_DIS();
 8000392:	4b22      	ldr	r3, [pc, #136]	@ (800041c <GPIO_CLK+0x1ac>)
 8000394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000396:	4a21      	ldr	r2, [pc, #132]	@ (800041c <GPIO_CLK+0x1ac>)
 8000398:	f023 0308 	bic.w	r3, r3, #8
 800039c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800039e:	e035      	b.n	800040c <GPIO_CLK+0x19c>
		else if(pGPIO == GPIOE)
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	4a22      	ldr	r2, [pc, #136]	@ (800042c <GPIO_CLK+0x1bc>)
 80003a4:	4293      	cmp	r3, r2
 80003a6:	d106      	bne.n	80003b6 <GPIO_CLK+0x146>
			GPIOE_CLK_DIS();
 80003a8:	4b1c      	ldr	r3, [pc, #112]	@ (800041c <GPIO_CLK+0x1ac>)
 80003aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ac:	4a1b      	ldr	r2, [pc, #108]	@ (800041c <GPIO_CLK+0x1ac>)
 80003ae:	f023 0310 	bic.w	r3, r3, #16
 80003b2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003b4:	e02a      	b.n	800040c <GPIO_CLK+0x19c>
		else if(pGPIO == GPIOF)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	4a1d      	ldr	r2, [pc, #116]	@ (8000430 <GPIO_CLK+0x1c0>)
 80003ba:	4293      	cmp	r3, r2
 80003bc:	d106      	bne.n	80003cc <GPIO_CLK+0x15c>
			GPIOF_CLK_DIS();
 80003be:	4b17      	ldr	r3, [pc, #92]	@ (800041c <GPIO_CLK+0x1ac>)
 80003c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003c2:	4a16      	ldr	r2, [pc, #88]	@ (800041c <GPIO_CLK+0x1ac>)
 80003c4:	f023 0320 	bic.w	r3, r3, #32
 80003c8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003ca:	e01f      	b.n	800040c <GPIO_CLK+0x19c>
		else if(pGPIO == GPIOG)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	4a19      	ldr	r2, [pc, #100]	@ (8000434 <GPIO_CLK+0x1c4>)
 80003d0:	4293      	cmp	r3, r2
 80003d2:	d106      	bne.n	80003e2 <GPIO_CLK+0x172>
			GPIOG_CLK_DIS();
 80003d4:	4b11      	ldr	r3, [pc, #68]	@ (800041c <GPIO_CLK+0x1ac>)
 80003d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003d8:	4a10      	ldr	r2, [pc, #64]	@ (800041c <GPIO_CLK+0x1ac>)
 80003da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80003de:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003e0:	e014      	b.n	800040c <GPIO_CLK+0x19c>
		else if(pGPIO == GPIOH)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	4a14      	ldr	r2, [pc, #80]	@ (8000438 <GPIO_CLK+0x1c8>)
 80003e6:	4293      	cmp	r3, r2
 80003e8:	d106      	bne.n	80003f8 <GPIO_CLK+0x188>
			GPIOH_CLK_DIS();
 80003ea:	4b0c      	ldr	r3, [pc, #48]	@ (800041c <GPIO_CLK+0x1ac>)
 80003ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ee:	4a0b      	ldr	r2, [pc, #44]	@ (800041c <GPIO_CLK+0x1ac>)
 80003f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80003f4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003f6:	e009      	b.n	800040c <GPIO_CLK+0x19c>
		else if(pGPIO == GPIOI)
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	4a10      	ldr	r2, [pc, #64]	@ (800043c <GPIO_CLK+0x1cc>)
 80003fc:	4293      	cmp	r3, r2
 80003fe:	d105      	bne.n	800040c <GPIO_CLK+0x19c>
			GPIOI_CLK_DIS();
 8000400:	4b06      	ldr	r3, [pc, #24]	@ (800041c <GPIO_CLK+0x1ac>)
 8000402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000404:	4a05      	ldr	r2, [pc, #20]	@ (800041c <GPIO_CLK+0x1ac>)
 8000406:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800040a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800040c:	bf00      	nop
 800040e:	370c      	adds	r7, #12
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr
 8000418:	40020000 	.word	0x40020000
 800041c:	40023800 	.word	0x40023800
 8000420:	40020400 	.word	0x40020400
 8000424:	40020800 	.word	0x40020800
 8000428:	40020c00 	.word	0x40020c00
 800042c:	40021000 	.word	0x40021000
 8000430:	40021400 	.word	0x40021400
 8000434:	40021800 	.word	0x40021800
 8000438:	40021c00 	.word	0x40021c00
 800043c:	40022000 	.word	0x40022000

08000440 <GPIO_Init>:
 *@return					: None
 *
 *@note						: In this Func we need to config the given PORT and the given pin, mode, speed, output type, pull up-down resistor, alternate func
 *
 */
void GPIO_Init(GPIO_HAL *pGPIO_Handle){
 8000440:	b580      	push	{r7, lr}
 8000442:	b084      	sub	sp, #16
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]

	GPIO_CLK(pGPIO_Handle->pGPIOx, ENABLE);
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	2101      	movs	r1, #1
 800044e:	4618      	mov	r0, r3
 8000450:	f7ff ff0e 	bl	8000270 <GPIO_CLK>
	/*Nguoi dung da khai bao tat ca cac gia tri can thiet, bay h chi huong con tro
	 * den vi tri thanh ghi dung voi nguoi dung nhap
	*/
	//-----------------------------------------------------------------------------------------------
	//1. Mode
	uint32_t tmp = 0;
 8000454:	2300      	movs	r3, #0
 8000456:	60fb      	str	r3, [r7, #12]
	// Check if mode interrupt or not (IRQ have value > GPIO_MODE_ANALOG (3))
	if(pGPIO_Handle->GPIO_PIN_CONFIG.GPIO_Pin_mode <= GPIO_MODE_ANALOG){
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	795b      	ldrb	r3, [r3, #5]
 800045c:	2b03      	cmp	r3, #3
 800045e:	d81f      	bhi.n	80004a0 <GPIO_Init+0x60>
		// not an interrupt
		// Shift value of mode to the right register
		tmp = (pGPIO_Handle->GPIO_PIN_CONFIG.GPIO_Pin_mode << (2 * pGPIO_Handle->GPIO_PIN_CONFIG.GPIO_Pin_num));
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	795b      	ldrb	r3, [r3, #5]
 8000464:	461a      	mov	r2, r3
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	791b      	ldrb	r3, [r3, #4]
 800046a:	005b      	lsls	r3, r3, #1
 800046c:	fa02 f303 	lsl.w	r3, r2, r3
 8000470:	60fb      	str	r3, [r7, #12]
		pGPIO_Handle->pGPIOx->MODER &= ~(0x03 << (2 * pGPIO_Handle->GPIO_PIN_CONFIG.GPIO_Pin_num)); // clear bit at that position
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	681a      	ldr	r2, [r3, #0]
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	791b      	ldrb	r3, [r3, #4]
 800047c:	005b      	lsls	r3, r3, #1
 800047e:	2103      	movs	r1, #3
 8000480:	fa01 f303 	lsl.w	r3, r1, r3
 8000484:	43db      	mvns	r3, r3
 8000486:	4619      	mov	r1, r3
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	400a      	ands	r2, r1
 800048e:	601a      	str	r2, [r3, #0]
		pGPIO_Handle->pGPIOx->MODER |= tmp; //only change the bit that is being config, not check other bit
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	6819      	ldr	r1, [r3, #0]
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	68fa      	ldr	r2, [r7, #12]
 800049c:	430a      	orrs	r2, r1
 800049e:	601a      	str	r2, [r3, #0]
	}else{
		// it is an interrupt
		// Left for future study
	}
	tmp = 0;
 80004a0:	2300      	movs	r3, #0
 80004a2:	60fb      	str	r3, [r7, #12]
	//-----------------------------------------------------------------------------------------------
	// 2. Speed
	tmp = pGPIO_Handle->GPIO_PIN_CONFIG.GPIO_Pin_speed << (2 * pGPIO_Handle->GPIO_PIN_CONFIG.GPIO_Pin_num);
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	799b      	ldrb	r3, [r3, #6]
 80004a8:	461a      	mov	r2, r3
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	791b      	ldrb	r3, [r3, #4]
 80004ae:	005b      	lsls	r3, r3, #1
 80004b0:	fa02 f303 	lsl.w	r3, r2, r3
 80004b4:	60fb      	str	r3, [r7, #12]
	pGPIO_Handle->pGPIOx->OSPEEDR &= ~(0x03 << (2 * pGPIO_Handle->GPIO_PIN_CONFIG.GPIO_Pin_num));
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	689a      	ldr	r2, [r3, #8]
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	791b      	ldrb	r3, [r3, #4]
 80004c0:	005b      	lsls	r3, r3, #1
 80004c2:	2103      	movs	r1, #3
 80004c4:	fa01 f303 	lsl.w	r3, r1, r3
 80004c8:	43db      	mvns	r3, r3
 80004ca:	4619      	mov	r1, r3
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	400a      	ands	r2, r1
 80004d2:	609a      	str	r2, [r3, #8]
	pGPIO_Handle->pGPIOx->OSPEEDR |= tmp;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	6899      	ldr	r1, [r3, #8]
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	68fa      	ldr	r2, [r7, #12]
 80004e0:	430a      	orrs	r2, r1
 80004e2:	609a      	str	r2, [r3, #8]
	tmp = 0;
 80004e4:	2300      	movs	r3, #0
 80004e6:	60fb      	str	r3, [r7, #12]
	//-----------------------------------------------------------------------------------------------
	// 3. pull up pull down
	tmp = pGPIO_Handle->GPIO_PIN_CONFIG.GPIO_Pin_PuPdCONTROL << (2 * pGPIO_Handle->GPIO_PIN_CONFIG.GPIO_Pin_num);
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	79db      	ldrb	r3, [r3, #7]
 80004ec:	461a      	mov	r2, r3
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	791b      	ldrb	r3, [r3, #4]
 80004f2:	005b      	lsls	r3, r3, #1
 80004f4:	fa02 f303 	lsl.w	r3, r2, r3
 80004f8:	60fb      	str	r3, [r7, #12]
	pGPIO_Handle->pGPIOx->PUPDR &= ~(0x03 << (2 * pGPIO_Handle->GPIO_PIN_CONFIG.GPIO_Pin_num));
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	68da      	ldr	r2, [r3, #12]
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	791b      	ldrb	r3, [r3, #4]
 8000504:	005b      	lsls	r3, r3, #1
 8000506:	2103      	movs	r1, #3
 8000508:	fa01 f303 	lsl.w	r3, r1, r3
 800050c:	43db      	mvns	r3, r3
 800050e:	4619      	mov	r1, r3
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	400a      	ands	r2, r1
 8000516:	60da      	str	r2, [r3, #12]
	pGPIO_Handle->pGPIOx->PUPDR |= tmp;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	68d9      	ldr	r1, [r3, #12]
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	68fa      	ldr	r2, [r7, #12]
 8000524:	430a      	orrs	r2, r1
 8000526:	60da      	str	r2, [r3, #12]
	tmp = 0;
 8000528:	2300      	movs	r3, #0
 800052a:	60fb      	str	r3, [r7, #12]
	//-----------------------------------------------------------------------------------------------
	// 4. out put type
	tmp = pGPIO_Handle->GPIO_PIN_CONFIG.GPIO_Pin_OUTPUT_TYPE << pGPIO_Handle->GPIO_PIN_CONFIG.GPIO_Pin_num;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	7a1b      	ldrb	r3, [r3, #8]
 8000530:	461a      	mov	r2, r3
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	791b      	ldrb	r3, [r3, #4]
 8000536:	fa02 f303 	lsl.w	r3, r2, r3
 800053a:	60fb      	str	r3, [r7, #12]
	pGPIO_Handle->pGPIOx->OTYPER &= ~(0x01 << pGPIO_Handle->GPIO_PIN_CONFIG.GPIO_Pin_num);
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	685a      	ldr	r2, [r3, #4]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	791b      	ldrb	r3, [r3, #4]
 8000546:	4619      	mov	r1, r3
 8000548:	2301      	movs	r3, #1
 800054a:	408b      	lsls	r3, r1
 800054c:	43db      	mvns	r3, r3
 800054e:	4619      	mov	r1, r3
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	400a      	ands	r2, r1
 8000556:	605a      	str	r2, [r3, #4]
	pGPIO_Handle->pGPIOx->OTYPER |= tmp;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	6859      	ldr	r1, [r3, #4]
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	68fa      	ldr	r2, [r7, #12]
 8000564:	430a      	orrs	r2, r1
 8000566:	605a      	str	r2, [r3, #4]
	tmp = 0;
 8000568:	2300      	movs	r3, #0
 800056a:	60fb      	str	r3, [r7, #12]
	//-----------------------------------------------------------------------------------------------
	// 5. Alternate Function
	if(pGPIO_Handle->GPIO_PIN_CONFIG.GPIO_Pin_mode == GPIO_MODE_ALT){
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	795b      	ldrb	r3, [r3, #5]
 8000570:	2b02      	cmp	r3, #2
 8000572:	d131      	bne.n	80005d8 <GPIO_Init+0x198>
		// configure the alternate function registers
		uint8_t temp1 , temp2 ;

		temp1 = pGPIO_Handle->GPIO_PIN_CONFIG.GPIO_Pin_num/ 8 ;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	791b      	ldrb	r3, [r3, #4]
 8000578:	08db      	lsrs	r3, r3, #3
 800057a:	72fb      	strb	r3, [r7, #11]
		temp2 = pGPIO_Handle->GPIO_PIN_CONFIG.GPIO_Pin_num % 8 ;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	791b      	ldrb	r3, [r3, #4]
 8000580:	f003 0307 	and.w	r3, r3, #7
 8000584:	72bb      	strb	r3, [r7, #10]
		pGPIO_Handle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2)) ;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	7afa      	ldrb	r2, [r7, #11]
 800058c:	3208      	adds	r2, #8
 800058e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000592:	7abb      	ldrb	r3, [r7, #10]
 8000594:	009b      	lsls	r3, r3, #2
 8000596:	220f      	movs	r2, #15
 8000598:	fa02 f303 	lsl.w	r3, r2, r3
 800059c:	43db      	mvns	r3, r3
 800059e:	4618      	mov	r0, r3
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	7afa      	ldrb	r2, [r7, #11]
 80005a6:	4001      	ands	r1, r0
 80005a8:	3208      	adds	r2, #8
 80005aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIO_Handle->pGPIOx->AFR[temp1] |= (pGPIO_Handle->GPIO_PIN_CONFIG.GPIO_Pin_AltFunc << (4 * temp2)) ;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	7afa      	ldrb	r2, [r7, #11]
 80005b4:	3208      	adds	r2, #8
 80005b6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	7a5b      	ldrb	r3, [r3, #9]
 80005be:	461a      	mov	r2, r3
 80005c0:	7abb      	ldrb	r3, [r7, #10]
 80005c2:	009b      	lsls	r3, r3, #2
 80005c4:	fa02 f303 	lsl.w	r3, r2, r3
 80005c8:	4618      	mov	r0, r3
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	7afa      	ldrb	r2, [r7, #11]
 80005d0:	4301      	orrs	r1, r0
 80005d2:	3208      	adds	r2, #8
 80005d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80005d8:	bf00      	nop
 80005da:	3710      	adds	r7, #16
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <GPIO_Write_Pin>:
 *@return					: None
 *
 *@note						: None
 *
 */
void GPIO_Write_Pin(GPIO_RegDef_t *pGPIO, uint8_t number, uint8_t value) {
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	460b      	mov	r3, r1
 80005ea:	70fb      	strb	r3, [r7, #3]
 80005ec:	4613      	mov	r3, r2
 80005ee:	70bb      	strb	r3, [r7, #2]
    if (value)
 80005f0:	78bb      	ldrb	r3, [r7, #2]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d009      	beq.n	800060a <GPIO_Write_Pin+0x2a>
        pGPIO->ODR |= (1 << number);  // Set bit (1)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	78fa      	ldrb	r2, [r7, #3]
 80005fc:	2101      	movs	r1, #1
 80005fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000602:	431a      	orrs	r2, r3
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	615a      	str	r2, [r3, #20]
    else
        pGPIO->ODR &= ~(1 << number); // Clear bit (0)
}
 8000608:	e009      	b.n	800061e <GPIO_Write_Pin+0x3e>
        pGPIO->ODR &= ~(1 << number); // Clear bit (0)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	695b      	ldr	r3, [r3, #20]
 800060e:	78fa      	ldrb	r2, [r7, #3]
 8000610:	2101      	movs	r1, #1
 8000612:	fa01 f202 	lsl.w	r2, r1, r2
 8000616:	43d2      	mvns	r2, r2
 8000618:	401a      	ands	r2, r3
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	615a      	str	r2, [r3, #20]
}
 800061e:	bf00      	nop
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
	...

0800062c <main>:
void delay(){
	for(uint32_t i = 0; i < 5000000; i++);
}

int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
	// CASE 1 : TRY TOGGLE WITH ONBOARD LED PD12(13,14,15) USE PUSH PULL
	// INIT A led
	GPIO_HAL LD13;

	// Select port mode speed
	LD13.pGPIOx = GPIOD;
 8000632:	4b10      	ldr	r3, [pc, #64]	@ (8000674 <main+0x48>)
 8000634:	607b      	str	r3, [r7, #4]
	LD13.GPIO_PIN_CONFIG.GPIO_Pin_mode = GPIO_MODE_OUTPUT;
 8000636:	2301      	movs	r3, #1
 8000638:	727b      	strb	r3, [r7, #9]
	LD13.GPIO_PIN_CONFIG.GPIO_Pin_num = GPIO_PIN_13;
 800063a:	230d      	movs	r3, #13
 800063c:	723b      	strb	r3, [r7, #8]
	LD13.GPIO_PIN_CONFIG.GPIO_Pin_speed = GPIO_SPEED_H;
 800063e:	2302      	movs	r3, #2
 8000640:	72bb      	strb	r3, [r7, #10]
	LD13.GPIO_PIN_CONFIG.GPIO_Pin_OUTPUT_TYPE = GPIO_MODE_OUTPUT_PP;
 8000642:	2300      	movs	r3, #0
 8000644:	733b      	strb	r3, [r7, #12]
	LD13.GPIO_PIN_CONFIG.GPIO_Pin_PuPdCONTROL = GPIO_PUPD_DIS;
 8000646:	2300      	movs	r3, #0
 8000648:	72fb      	strb	r3, [r7, #11]

	//GPIO_CLK(GPIOD, ENABLE);

	GPIO_Init(&LD13);
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	4618      	mov	r0, r3
 800064e:	f7ff fef7 	bl	8000440 <GPIO_Init>
	GPIO_Write_Pin(GPIOD, GPIO_PIN_13, SET);
 8000652:	2201      	movs	r2, #1
 8000654:	210d      	movs	r1, #13
 8000656:	4807      	ldr	r0, [pc, #28]	@ (8000674 <main+0x48>)
 8000658:	f7ff ffc2 	bl	80005e0 <GPIO_Write_Pin>

	printf("AHB1ENR Address: 0x%p\n", (void*)&(RCC->AHB1ENR));
 800065c:	4906      	ldr	r1, [pc, #24]	@ (8000678 <main+0x4c>)
 800065e:	4807      	ldr	r0, [pc, #28]	@ (800067c <main+0x50>)
 8000660:	f000 f9a0 	bl	80009a4 <iprintf>
	printf("Suck\n");
 8000664:	4806      	ldr	r0, [pc, #24]	@ (8000680 <main+0x54>)
 8000666:	f000 fa05 	bl	8000a74 <puts>
//	while(1){
//		GPIO_Toggle_Output(GPIOD, GPIO_PIN_13);
//		delay();
//	}

	return 0;
 800066a:	2300      	movs	r3, #0
}
 800066c:	4618      	mov	r0, r3
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40020c00 	.word	0x40020c00
 8000678:	40023830 	.word	0x40023830
 800067c:	08001754 	.word	0x08001754
 8000680:	0800176c 	.word	0x0800176c

08000684 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af00      	add	r7, sp, #0
 800068a:	60f8      	str	r0, [r7, #12]
 800068c:	60b9      	str	r1, [r7, #8]
 800068e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
 8000694:	e00a      	b.n	80006ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000696:	f3af 8000 	nop.w
 800069a:	4601      	mov	r1, r0
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	1c5a      	adds	r2, r3, #1
 80006a0:	60ba      	str	r2, [r7, #8]
 80006a2:	b2ca      	uxtb	r2, r1
 80006a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	3301      	adds	r3, #1
 80006aa:	617b      	str	r3, [r7, #20]
 80006ac:	697a      	ldr	r2, [r7, #20]
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	dbf0      	blt.n	8000696 <_read+0x12>
  }

  return len;
 80006b4:	687b      	ldr	r3, [r7, #4]
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3718      	adds	r7, #24
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}

080006be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	b086      	sub	sp, #24
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	60f8      	str	r0, [r7, #12]
 80006c6:	60b9      	str	r1, [r7, #8]
 80006c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ca:	2300      	movs	r3, #0
 80006cc:	617b      	str	r3, [r7, #20]
 80006ce:	e009      	b.n	80006e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	1c5a      	adds	r2, r3, #1
 80006d4:	60ba      	str	r2, [r7, #8]
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	4618      	mov	r0, r3
 80006da:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006de:	697b      	ldr	r3, [r7, #20]
 80006e0:	3301      	adds	r3, #1
 80006e2:	617b      	str	r3, [r7, #20]
 80006e4:	697a      	ldr	r2, [r7, #20]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	dbf1      	blt.n	80006d0 <_write+0x12>
  }
  return len;
 80006ec:	687b      	ldr	r3, [r7, #4]
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3718      	adds	r7, #24
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <_close>:

int _close(int file)
{
 80006f6:	b480      	push	{r7}
 80006f8:	b083      	sub	sp, #12
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80006fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000702:	4618      	mov	r0, r3
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr

0800070e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800070e:	b480      	push	{r7}
 8000710:	b083      	sub	sp, #12
 8000712:	af00      	add	r7, sp, #0
 8000714:	6078      	str	r0, [r7, #4]
 8000716:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800071e:	605a      	str	r2, [r3, #4]
  return 0;
 8000720:	2300      	movs	r3, #0
}
 8000722:	4618      	mov	r0, r3
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr

0800072e <_isatty>:

int _isatty(int file)
{
 800072e:	b480      	push	{r7}
 8000730:	b083      	sub	sp, #12
 8000732:	af00      	add	r7, sp, #0
 8000734:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000736:	2301      	movs	r3, #1
}
 8000738:	4618      	mov	r0, r3
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000744:	b480      	push	{r7}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0
 800074a:	60f8      	str	r0, [r7, #12]
 800074c:	60b9      	str	r1, [r7, #8]
 800074e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000750:	2300      	movs	r3, #0
}
 8000752:	4618      	mov	r0, r3
 8000754:	3714      	adds	r7, #20
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
	...

08000760 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b086      	sub	sp, #24
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000768:	4a14      	ldr	r2, [pc, #80]	@ (80007bc <_sbrk+0x5c>)
 800076a:	4b15      	ldr	r3, [pc, #84]	@ (80007c0 <_sbrk+0x60>)
 800076c:	1ad3      	subs	r3, r2, r3
 800076e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000774:	4b13      	ldr	r3, [pc, #76]	@ (80007c4 <_sbrk+0x64>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d102      	bne.n	8000782 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800077c:	4b11      	ldr	r3, [pc, #68]	@ (80007c4 <_sbrk+0x64>)
 800077e:	4a12      	ldr	r2, [pc, #72]	@ (80007c8 <_sbrk+0x68>)
 8000780:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000782:	4b10      	ldr	r3, [pc, #64]	@ (80007c4 <_sbrk+0x64>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	4413      	add	r3, r2
 800078a:	693a      	ldr	r2, [r7, #16]
 800078c:	429a      	cmp	r2, r3
 800078e:	d207      	bcs.n	80007a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000790:	f000 fa9e 	bl	8000cd0 <__errno>
 8000794:	4603      	mov	r3, r0
 8000796:	220c      	movs	r2, #12
 8000798:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800079a:	f04f 33ff 	mov.w	r3, #4294967295
 800079e:	e009      	b.n	80007b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007a0:	4b08      	ldr	r3, [pc, #32]	@ (80007c4 <_sbrk+0x64>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007a6:	4b07      	ldr	r3, [pc, #28]	@ (80007c4 <_sbrk+0x64>)
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4413      	add	r3, r2
 80007ae:	4a05      	ldr	r2, [pc, #20]	@ (80007c4 <_sbrk+0x64>)
 80007b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007b2:	68fb      	ldr	r3, [r7, #12]
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3718      	adds	r7, #24
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20020000 	.word	0x20020000
 80007c0:	00000400 	.word	0x00000400
 80007c4:	20000078 	.word	0x20000078
 80007c8:	200001c8 	.word	0x200001c8

080007cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007cc:	480d      	ldr	r0, [pc, #52]	@ (8000804 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007ce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007d0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007d4:	480c      	ldr	r0, [pc, #48]	@ (8000808 <LoopForever+0x6>)
  ldr r1, =_edata
 80007d6:	490d      	ldr	r1, [pc, #52]	@ (800080c <LoopForever+0xa>)
  ldr r2, =_sidata
 80007d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000810 <LoopForever+0xe>)
  movs r3, #0
 80007da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007dc:	e002      	b.n	80007e4 <LoopCopyDataInit>

080007de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007e2:	3304      	adds	r3, #4

080007e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007e8:	d3f9      	bcc.n	80007de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000814 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007ec:	4c0a      	ldr	r4, [pc, #40]	@ (8000818 <LoopForever+0x16>)
  movs r3, #0
 80007ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007f0:	e001      	b.n	80007f6 <LoopFillZerobss>

080007f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007f4:	3204      	adds	r2, #4

080007f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007f8:	d3fb      	bcc.n	80007f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007fa:	f000 fa6f 	bl	8000cdc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007fe:	f7ff ff15 	bl	800062c <main>

08000802 <LoopForever>:

LoopForever:
  b LoopForever
 8000802:	e7fe      	b.n	8000802 <LoopForever>
  ldr   r0, =_estack
 8000804:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000808:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800080c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000810:	080017b4 	.word	0x080017b4
  ldr r2, =_sbss
 8000814:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000818:	200001c8 	.word	0x200001c8

0800081c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800081c:	e7fe      	b.n	800081c <ADC_IRQHandler>
	...

08000820 <std>:
 8000820:	2300      	movs	r3, #0
 8000822:	b510      	push	{r4, lr}
 8000824:	4604      	mov	r4, r0
 8000826:	e9c0 3300 	strd	r3, r3, [r0]
 800082a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800082e:	6083      	str	r3, [r0, #8]
 8000830:	8181      	strh	r1, [r0, #12]
 8000832:	6643      	str	r3, [r0, #100]	@ 0x64
 8000834:	81c2      	strh	r2, [r0, #14]
 8000836:	6183      	str	r3, [r0, #24]
 8000838:	4619      	mov	r1, r3
 800083a:	2208      	movs	r2, #8
 800083c:	305c      	adds	r0, #92	@ 0x5c
 800083e:	f000 f9f9 	bl	8000c34 <memset>
 8000842:	4b0d      	ldr	r3, [pc, #52]	@ (8000878 <std+0x58>)
 8000844:	6263      	str	r3, [r4, #36]	@ 0x24
 8000846:	4b0d      	ldr	r3, [pc, #52]	@ (800087c <std+0x5c>)
 8000848:	62a3      	str	r3, [r4, #40]	@ 0x28
 800084a:	4b0d      	ldr	r3, [pc, #52]	@ (8000880 <std+0x60>)
 800084c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800084e:	4b0d      	ldr	r3, [pc, #52]	@ (8000884 <std+0x64>)
 8000850:	6323      	str	r3, [r4, #48]	@ 0x30
 8000852:	4b0d      	ldr	r3, [pc, #52]	@ (8000888 <std+0x68>)
 8000854:	6224      	str	r4, [r4, #32]
 8000856:	429c      	cmp	r4, r3
 8000858:	d006      	beq.n	8000868 <std+0x48>
 800085a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800085e:	4294      	cmp	r4, r2
 8000860:	d002      	beq.n	8000868 <std+0x48>
 8000862:	33d0      	adds	r3, #208	@ 0xd0
 8000864:	429c      	cmp	r4, r3
 8000866:	d105      	bne.n	8000874 <std+0x54>
 8000868:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800086c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000870:	f000 ba58 	b.w	8000d24 <__retarget_lock_init_recursive>
 8000874:	bd10      	pop	{r4, pc}
 8000876:	bf00      	nop
 8000878:	08000a85 	.word	0x08000a85
 800087c:	08000aa7 	.word	0x08000aa7
 8000880:	08000adf 	.word	0x08000adf
 8000884:	08000b03 	.word	0x08000b03
 8000888:	2000007c 	.word	0x2000007c

0800088c <stdio_exit_handler>:
 800088c:	4a02      	ldr	r2, [pc, #8]	@ (8000898 <stdio_exit_handler+0xc>)
 800088e:	4903      	ldr	r1, [pc, #12]	@ (800089c <stdio_exit_handler+0x10>)
 8000890:	4803      	ldr	r0, [pc, #12]	@ (80008a0 <stdio_exit_handler+0x14>)
 8000892:	f000 b869 	b.w	8000968 <_fwalk_sglue>
 8000896:	bf00      	nop
 8000898:	20000000 	.word	0x20000000
 800089c:	080015c5 	.word	0x080015c5
 80008a0:	20000010 	.word	0x20000010

080008a4 <cleanup_stdio>:
 80008a4:	6841      	ldr	r1, [r0, #4]
 80008a6:	4b0c      	ldr	r3, [pc, #48]	@ (80008d8 <cleanup_stdio+0x34>)
 80008a8:	4299      	cmp	r1, r3
 80008aa:	b510      	push	{r4, lr}
 80008ac:	4604      	mov	r4, r0
 80008ae:	d001      	beq.n	80008b4 <cleanup_stdio+0x10>
 80008b0:	f000 fe88 	bl	80015c4 <_fflush_r>
 80008b4:	68a1      	ldr	r1, [r4, #8]
 80008b6:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <cleanup_stdio+0x38>)
 80008b8:	4299      	cmp	r1, r3
 80008ba:	d002      	beq.n	80008c2 <cleanup_stdio+0x1e>
 80008bc:	4620      	mov	r0, r4
 80008be:	f000 fe81 	bl	80015c4 <_fflush_r>
 80008c2:	68e1      	ldr	r1, [r4, #12]
 80008c4:	4b06      	ldr	r3, [pc, #24]	@ (80008e0 <cleanup_stdio+0x3c>)
 80008c6:	4299      	cmp	r1, r3
 80008c8:	d004      	beq.n	80008d4 <cleanup_stdio+0x30>
 80008ca:	4620      	mov	r0, r4
 80008cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008d0:	f000 be78 	b.w	80015c4 <_fflush_r>
 80008d4:	bd10      	pop	{r4, pc}
 80008d6:	bf00      	nop
 80008d8:	2000007c 	.word	0x2000007c
 80008dc:	200000e4 	.word	0x200000e4
 80008e0:	2000014c 	.word	0x2000014c

080008e4 <global_stdio_init.part.0>:
 80008e4:	b510      	push	{r4, lr}
 80008e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000914 <global_stdio_init.part.0+0x30>)
 80008e8:	4c0b      	ldr	r4, [pc, #44]	@ (8000918 <global_stdio_init.part.0+0x34>)
 80008ea:	4a0c      	ldr	r2, [pc, #48]	@ (800091c <global_stdio_init.part.0+0x38>)
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	4620      	mov	r0, r4
 80008f0:	2200      	movs	r2, #0
 80008f2:	2104      	movs	r1, #4
 80008f4:	f7ff ff94 	bl	8000820 <std>
 80008f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80008fc:	2201      	movs	r2, #1
 80008fe:	2109      	movs	r1, #9
 8000900:	f7ff ff8e 	bl	8000820 <std>
 8000904:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000908:	2202      	movs	r2, #2
 800090a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800090e:	2112      	movs	r1, #18
 8000910:	f7ff bf86 	b.w	8000820 <std>
 8000914:	200001b4 	.word	0x200001b4
 8000918:	2000007c 	.word	0x2000007c
 800091c:	0800088d 	.word	0x0800088d

08000920 <__sfp_lock_acquire>:
 8000920:	4801      	ldr	r0, [pc, #4]	@ (8000928 <__sfp_lock_acquire+0x8>)
 8000922:	f000 ba00 	b.w	8000d26 <__retarget_lock_acquire_recursive>
 8000926:	bf00      	nop
 8000928:	200001bd 	.word	0x200001bd

0800092c <__sfp_lock_release>:
 800092c:	4801      	ldr	r0, [pc, #4]	@ (8000934 <__sfp_lock_release+0x8>)
 800092e:	f000 b9fb 	b.w	8000d28 <__retarget_lock_release_recursive>
 8000932:	bf00      	nop
 8000934:	200001bd 	.word	0x200001bd

08000938 <__sinit>:
 8000938:	b510      	push	{r4, lr}
 800093a:	4604      	mov	r4, r0
 800093c:	f7ff fff0 	bl	8000920 <__sfp_lock_acquire>
 8000940:	6a23      	ldr	r3, [r4, #32]
 8000942:	b11b      	cbz	r3, 800094c <__sinit+0x14>
 8000944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000948:	f7ff bff0 	b.w	800092c <__sfp_lock_release>
 800094c:	4b04      	ldr	r3, [pc, #16]	@ (8000960 <__sinit+0x28>)
 800094e:	6223      	str	r3, [r4, #32]
 8000950:	4b04      	ldr	r3, [pc, #16]	@ (8000964 <__sinit+0x2c>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d1f5      	bne.n	8000944 <__sinit+0xc>
 8000958:	f7ff ffc4 	bl	80008e4 <global_stdio_init.part.0>
 800095c:	e7f2      	b.n	8000944 <__sinit+0xc>
 800095e:	bf00      	nop
 8000960:	080008a5 	.word	0x080008a5
 8000964:	200001b4 	.word	0x200001b4

08000968 <_fwalk_sglue>:
 8000968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800096c:	4607      	mov	r7, r0
 800096e:	4688      	mov	r8, r1
 8000970:	4614      	mov	r4, r2
 8000972:	2600      	movs	r6, #0
 8000974:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000978:	f1b9 0901 	subs.w	r9, r9, #1
 800097c:	d505      	bpl.n	800098a <_fwalk_sglue+0x22>
 800097e:	6824      	ldr	r4, [r4, #0]
 8000980:	2c00      	cmp	r4, #0
 8000982:	d1f7      	bne.n	8000974 <_fwalk_sglue+0xc>
 8000984:	4630      	mov	r0, r6
 8000986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800098a:	89ab      	ldrh	r3, [r5, #12]
 800098c:	2b01      	cmp	r3, #1
 800098e:	d907      	bls.n	80009a0 <_fwalk_sglue+0x38>
 8000990:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000994:	3301      	adds	r3, #1
 8000996:	d003      	beq.n	80009a0 <_fwalk_sglue+0x38>
 8000998:	4629      	mov	r1, r5
 800099a:	4638      	mov	r0, r7
 800099c:	47c0      	blx	r8
 800099e:	4306      	orrs	r6, r0
 80009a0:	3568      	adds	r5, #104	@ 0x68
 80009a2:	e7e9      	b.n	8000978 <_fwalk_sglue+0x10>

080009a4 <iprintf>:
 80009a4:	b40f      	push	{r0, r1, r2, r3}
 80009a6:	b507      	push	{r0, r1, r2, lr}
 80009a8:	4906      	ldr	r1, [pc, #24]	@ (80009c4 <iprintf+0x20>)
 80009aa:	ab04      	add	r3, sp, #16
 80009ac:	6808      	ldr	r0, [r1, #0]
 80009ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80009b2:	6881      	ldr	r1, [r0, #8]
 80009b4:	9301      	str	r3, [sp, #4]
 80009b6:	f000 fadb 	bl	8000f70 <_vfiprintf_r>
 80009ba:	b003      	add	sp, #12
 80009bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80009c0:	b004      	add	sp, #16
 80009c2:	4770      	bx	lr
 80009c4:	2000000c 	.word	0x2000000c

080009c8 <_puts_r>:
 80009c8:	6a03      	ldr	r3, [r0, #32]
 80009ca:	b570      	push	{r4, r5, r6, lr}
 80009cc:	6884      	ldr	r4, [r0, #8]
 80009ce:	4605      	mov	r5, r0
 80009d0:	460e      	mov	r6, r1
 80009d2:	b90b      	cbnz	r3, 80009d8 <_puts_r+0x10>
 80009d4:	f7ff ffb0 	bl	8000938 <__sinit>
 80009d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80009da:	07db      	lsls	r3, r3, #31
 80009dc:	d405      	bmi.n	80009ea <_puts_r+0x22>
 80009de:	89a3      	ldrh	r3, [r4, #12]
 80009e0:	0598      	lsls	r0, r3, #22
 80009e2:	d402      	bmi.n	80009ea <_puts_r+0x22>
 80009e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80009e6:	f000 f99e 	bl	8000d26 <__retarget_lock_acquire_recursive>
 80009ea:	89a3      	ldrh	r3, [r4, #12]
 80009ec:	0719      	lsls	r1, r3, #28
 80009ee:	d502      	bpl.n	80009f6 <_puts_r+0x2e>
 80009f0:	6923      	ldr	r3, [r4, #16]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d135      	bne.n	8000a62 <_puts_r+0x9a>
 80009f6:	4621      	mov	r1, r4
 80009f8:	4628      	mov	r0, r5
 80009fa:	f000 f8c5 	bl	8000b88 <__swsetup_r>
 80009fe:	b380      	cbz	r0, 8000a62 <_puts_r+0x9a>
 8000a00:	f04f 35ff 	mov.w	r5, #4294967295
 8000a04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000a06:	07da      	lsls	r2, r3, #31
 8000a08:	d405      	bmi.n	8000a16 <_puts_r+0x4e>
 8000a0a:	89a3      	ldrh	r3, [r4, #12]
 8000a0c:	059b      	lsls	r3, r3, #22
 8000a0e:	d402      	bmi.n	8000a16 <_puts_r+0x4e>
 8000a10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000a12:	f000 f989 	bl	8000d28 <__retarget_lock_release_recursive>
 8000a16:	4628      	mov	r0, r5
 8000a18:	bd70      	pop	{r4, r5, r6, pc}
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	da04      	bge.n	8000a28 <_puts_r+0x60>
 8000a1e:	69a2      	ldr	r2, [r4, #24]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	dc17      	bgt.n	8000a54 <_puts_r+0x8c>
 8000a24:	290a      	cmp	r1, #10
 8000a26:	d015      	beq.n	8000a54 <_puts_r+0x8c>
 8000a28:	6823      	ldr	r3, [r4, #0]
 8000a2a:	1c5a      	adds	r2, r3, #1
 8000a2c:	6022      	str	r2, [r4, #0]
 8000a2e:	7019      	strb	r1, [r3, #0]
 8000a30:	68a3      	ldr	r3, [r4, #8]
 8000a32:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000a36:	3b01      	subs	r3, #1
 8000a38:	60a3      	str	r3, [r4, #8]
 8000a3a:	2900      	cmp	r1, #0
 8000a3c:	d1ed      	bne.n	8000a1a <_puts_r+0x52>
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	da11      	bge.n	8000a66 <_puts_r+0x9e>
 8000a42:	4622      	mov	r2, r4
 8000a44:	210a      	movs	r1, #10
 8000a46:	4628      	mov	r0, r5
 8000a48:	f000 f85f 	bl	8000b0a <__swbuf_r>
 8000a4c:	3001      	adds	r0, #1
 8000a4e:	d0d7      	beq.n	8000a00 <_puts_r+0x38>
 8000a50:	250a      	movs	r5, #10
 8000a52:	e7d7      	b.n	8000a04 <_puts_r+0x3c>
 8000a54:	4622      	mov	r2, r4
 8000a56:	4628      	mov	r0, r5
 8000a58:	f000 f857 	bl	8000b0a <__swbuf_r>
 8000a5c:	3001      	adds	r0, #1
 8000a5e:	d1e7      	bne.n	8000a30 <_puts_r+0x68>
 8000a60:	e7ce      	b.n	8000a00 <_puts_r+0x38>
 8000a62:	3e01      	subs	r6, #1
 8000a64:	e7e4      	b.n	8000a30 <_puts_r+0x68>
 8000a66:	6823      	ldr	r3, [r4, #0]
 8000a68:	1c5a      	adds	r2, r3, #1
 8000a6a:	6022      	str	r2, [r4, #0]
 8000a6c:	220a      	movs	r2, #10
 8000a6e:	701a      	strb	r2, [r3, #0]
 8000a70:	e7ee      	b.n	8000a50 <_puts_r+0x88>
	...

08000a74 <puts>:
 8000a74:	4b02      	ldr	r3, [pc, #8]	@ (8000a80 <puts+0xc>)
 8000a76:	4601      	mov	r1, r0
 8000a78:	6818      	ldr	r0, [r3, #0]
 8000a7a:	f7ff bfa5 	b.w	80009c8 <_puts_r>
 8000a7e:	bf00      	nop
 8000a80:	2000000c 	.word	0x2000000c

08000a84 <__sread>:
 8000a84:	b510      	push	{r4, lr}
 8000a86:	460c      	mov	r4, r1
 8000a88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a8c:	f000 f8fc 	bl	8000c88 <_read_r>
 8000a90:	2800      	cmp	r0, #0
 8000a92:	bfab      	itete	ge
 8000a94:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000a96:	89a3      	ldrhlt	r3, [r4, #12]
 8000a98:	181b      	addge	r3, r3, r0
 8000a9a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000a9e:	bfac      	ite	ge
 8000aa0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000aa2:	81a3      	strhlt	r3, [r4, #12]
 8000aa4:	bd10      	pop	{r4, pc}

08000aa6 <__swrite>:
 8000aa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000aaa:	461f      	mov	r7, r3
 8000aac:	898b      	ldrh	r3, [r1, #12]
 8000aae:	05db      	lsls	r3, r3, #23
 8000ab0:	4605      	mov	r5, r0
 8000ab2:	460c      	mov	r4, r1
 8000ab4:	4616      	mov	r6, r2
 8000ab6:	d505      	bpl.n	8000ac4 <__swrite+0x1e>
 8000ab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000abc:	2302      	movs	r3, #2
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f000 f8d0 	bl	8000c64 <_lseek_r>
 8000ac4:	89a3      	ldrh	r3, [r4, #12]
 8000ac6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000aca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000ace:	81a3      	strh	r3, [r4, #12]
 8000ad0:	4632      	mov	r2, r6
 8000ad2:	463b      	mov	r3, r7
 8000ad4:	4628      	mov	r0, r5
 8000ad6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000ada:	f000 b8e7 	b.w	8000cac <_write_r>

08000ade <__sseek>:
 8000ade:	b510      	push	{r4, lr}
 8000ae0:	460c      	mov	r4, r1
 8000ae2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ae6:	f000 f8bd 	bl	8000c64 <_lseek_r>
 8000aea:	1c43      	adds	r3, r0, #1
 8000aec:	89a3      	ldrh	r3, [r4, #12]
 8000aee:	bf15      	itete	ne
 8000af0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000af2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000af6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000afa:	81a3      	strheq	r3, [r4, #12]
 8000afc:	bf18      	it	ne
 8000afe:	81a3      	strhne	r3, [r4, #12]
 8000b00:	bd10      	pop	{r4, pc}

08000b02 <__sclose>:
 8000b02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b06:	f000 b89d 	b.w	8000c44 <_close_r>

08000b0a <__swbuf_r>:
 8000b0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b0c:	460e      	mov	r6, r1
 8000b0e:	4614      	mov	r4, r2
 8000b10:	4605      	mov	r5, r0
 8000b12:	b118      	cbz	r0, 8000b1c <__swbuf_r+0x12>
 8000b14:	6a03      	ldr	r3, [r0, #32]
 8000b16:	b90b      	cbnz	r3, 8000b1c <__swbuf_r+0x12>
 8000b18:	f7ff ff0e 	bl	8000938 <__sinit>
 8000b1c:	69a3      	ldr	r3, [r4, #24]
 8000b1e:	60a3      	str	r3, [r4, #8]
 8000b20:	89a3      	ldrh	r3, [r4, #12]
 8000b22:	071a      	lsls	r2, r3, #28
 8000b24:	d501      	bpl.n	8000b2a <__swbuf_r+0x20>
 8000b26:	6923      	ldr	r3, [r4, #16]
 8000b28:	b943      	cbnz	r3, 8000b3c <__swbuf_r+0x32>
 8000b2a:	4621      	mov	r1, r4
 8000b2c:	4628      	mov	r0, r5
 8000b2e:	f000 f82b 	bl	8000b88 <__swsetup_r>
 8000b32:	b118      	cbz	r0, 8000b3c <__swbuf_r+0x32>
 8000b34:	f04f 37ff 	mov.w	r7, #4294967295
 8000b38:	4638      	mov	r0, r7
 8000b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b3c:	6823      	ldr	r3, [r4, #0]
 8000b3e:	6922      	ldr	r2, [r4, #16]
 8000b40:	1a98      	subs	r0, r3, r2
 8000b42:	6963      	ldr	r3, [r4, #20]
 8000b44:	b2f6      	uxtb	r6, r6
 8000b46:	4283      	cmp	r3, r0
 8000b48:	4637      	mov	r7, r6
 8000b4a:	dc05      	bgt.n	8000b58 <__swbuf_r+0x4e>
 8000b4c:	4621      	mov	r1, r4
 8000b4e:	4628      	mov	r0, r5
 8000b50:	f000 fd38 	bl	80015c4 <_fflush_r>
 8000b54:	2800      	cmp	r0, #0
 8000b56:	d1ed      	bne.n	8000b34 <__swbuf_r+0x2a>
 8000b58:	68a3      	ldr	r3, [r4, #8]
 8000b5a:	3b01      	subs	r3, #1
 8000b5c:	60a3      	str	r3, [r4, #8]
 8000b5e:	6823      	ldr	r3, [r4, #0]
 8000b60:	1c5a      	adds	r2, r3, #1
 8000b62:	6022      	str	r2, [r4, #0]
 8000b64:	701e      	strb	r6, [r3, #0]
 8000b66:	6962      	ldr	r2, [r4, #20]
 8000b68:	1c43      	adds	r3, r0, #1
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	d004      	beq.n	8000b78 <__swbuf_r+0x6e>
 8000b6e:	89a3      	ldrh	r3, [r4, #12]
 8000b70:	07db      	lsls	r3, r3, #31
 8000b72:	d5e1      	bpl.n	8000b38 <__swbuf_r+0x2e>
 8000b74:	2e0a      	cmp	r6, #10
 8000b76:	d1df      	bne.n	8000b38 <__swbuf_r+0x2e>
 8000b78:	4621      	mov	r1, r4
 8000b7a:	4628      	mov	r0, r5
 8000b7c:	f000 fd22 	bl	80015c4 <_fflush_r>
 8000b80:	2800      	cmp	r0, #0
 8000b82:	d0d9      	beq.n	8000b38 <__swbuf_r+0x2e>
 8000b84:	e7d6      	b.n	8000b34 <__swbuf_r+0x2a>
	...

08000b88 <__swsetup_r>:
 8000b88:	b538      	push	{r3, r4, r5, lr}
 8000b8a:	4b29      	ldr	r3, [pc, #164]	@ (8000c30 <__swsetup_r+0xa8>)
 8000b8c:	4605      	mov	r5, r0
 8000b8e:	6818      	ldr	r0, [r3, #0]
 8000b90:	460c      	mov	r4, r1
 8000b92:	b118      	cbz	r0, 8000b9c <__swsetup_r+0x14>
 8000b94:	6a03      	ldr	r3, [r0, #32]
 8000b96:	b90b      	cbnz	r3, 8000b9c <__swsetup_r+0x14>
 8000b98:	f7ff fece 	bl	8000938 <__sinit>
 8000b9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ba0:	0719      	lsls	r1, r3, #28
 8000ba2:	d422      	bmi.n	8000bea <__swsetup_r+0x62>
 8000ba4:	06da      	lsls	r2, r3, #27
 8000ba6:	d407      	bmi.n	8000bb8 <__swsetup_r+0x30>
 8000ba8:	2209      	movs	r2, #9
 8000baa:	602a      	str	r2, [r5, #0]
 8000bac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bb0:	81a3      	strh	r3, [r4, #12]
 8000bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb6:	e033      	b.n	8000c20 <__swsetup_r+0x98>
 8000bb8:	0758      	lsls	r0, r3, #29
 8000bba:	d512      	bpl.n	8000be2 <__swsetup_r+0x5a>
 8000bbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000bbe:	b141      	cbz	r1, 8000bd2 <__swsetup_r+0x4a>
 8000bc0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000bc4:	4299      	cmp	r1, r3
 8000bc6:	d002      	beq.n	8000bce <__swsetup_r+0x46>
 8000bc8:	4628      	mov	r0, r5
 8000bca:	f000 f8af 	bl	8000d2c <_free_r>
 8000bce:	2300      	movs	r3, #0
 8000bd0:	6363      	str	r3, [r4, #52]	@ 0x34
 8000bd2:	89a3      	ldrh	r3, [r4, #12]
 8000bd4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000bd8:	81a3      	strh	r3, [r4, #12]
 8000bda:	2300      	movs	r3, #0
 8000bdc:	6063      	str	r3, [r4, #4]
 8000bde:	6923      	ldr	r3, [r4, #16]
 8000be0:	6023      	str	r3, [r4, #0]
 8000be2:	89a3      	ldrh	r3, [r4, #12]
 8000be4:	f043 0308 	orr.w	r3, r3, #8
 8000be8:	81a3      	strh	r3, [r4, #12]
 8000bea:	6923      	ldr	r3, [r4, #16]
 8000bec:	b94b      	cbnz	r3, 8000c02 <__swsetup_r+0x7a>
 8000bee:	89a3      	ldrh	r3, [r4, #12]
 8000bf0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000bf4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000bf8:	d003      	beq.n	8000c02 <__swsetup_r+0x7a>
 8000bfa:	4621      	mov	r1, r4
 8000bfc:	4628      	mov	r0, r5
 8000bfe:	f000 fd2f 	bl	8001660 <__smakebuf_r>
 8000c02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c06:	f013 0201 	ands.w	r2, r3, #1
 8000c0a:	d00a      	beq.n	8000c22 <__swsetup_r+0x9a>
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	60a2      	str	r2, [r4, #8]
 8000c10:	6962      	ldr	r2, [r4, #20]
 8000c12:	4252      	negs	r2, r2
 8000c14:	61a2      	str	r2, [r4, #24]
 8000c16:	6922      	ldr	r2, [r4, #16]
 8000c18:	b942      	cbnz	r2, 8000c2c <__swsetup_r+0xa4>
 8000c1a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000c1e:	d1c5      	bne.n	8000bac <__swsetup_r+0x24>
 8000c20:	bd38      	pop	{r3, r4, r5, pc}
 8000c22:	0799      	lsls	r1, r3, #30
 8000c24:	bf58      	it	pl
 8000c26:	6962      	ldrpl	r2, [r4, #20]
 8000c28:	60a2      	str	r2, [r4, #8]
 8000c2a:	e7f4      	b.n	8000c16 <__swsetup_r+0x8e>
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	e7f7      	b.n	8000c20 <__swsetup_r+0x98>
 8000c30:	2000000c 	.word	0x2000000c

08000c34 <memset>:
 8000c34:	4402      	add	r2, r0
 8000c36:	4603      	mov	r3, r0
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d100      	bne.n	8000c3e <memset+0xa>
 8000c3c:	4770      	bx	lr
 8000c3e:	f803 1b01 	strb.w	r1, [r3], #1
 8000c42:	e7f9      	b.n	8000c38 <memset+0x4>

08000c44 <_close_r>:
 8000c44:	b538      	push	{r3, r4, r5, lr}
 8000c46:	4d06      	ldr	r5, [pc, #24]	@ (8000c60 <_close_r+0x1c>)
 8000c48:	2300      	movs	r3, #0
 8000c4a:	4604      	mov	r4, r0
 8000c4c:	4608      	mov	r0, r1
 8000c4e:	602b      	str	r3, [r5, #0]
 8000c50:	f7ff fd51 	bl	80006f6 <_close>
 8000c54:	1c43      	adds	r3, r0, #1
 8000c56:	d102      	bne.n	8000c5e <_close_r+0x1a>
 8000c58:	682b      	ldr	r3, [r5, #0]
 8000c5a:	b103      	cbz	r3, 8000c5e <_close_r+0x1a>
 8000c5c:	6023      	str	r3, [r4, #0]
 8000c5e:	bd38      	pop	{r3, r4, r5, pc}
 8000c60:	200001b8 	.word	0x200001b8

08000c64 <_lseek_r>:
 8000c64:	b538      	push	{r3, r4, r5, lr}
 8000c66:	4d07      	ldr	r5, [pc, #28]	@ (8000c84 <_lseek_r+0x20>)
 8000c68:	4604      	mov	r4, r0
 8000c6a:	4608      	mov	r0, r1
 8000c6c:	4611      	mov	r1, r2
 8000c6e:	2200      	movs	r2, #0
 8000c70:	602a      	str	r2, [r5, #0]
 8000c72:	461a      	mov	r2, r3
 8000c74:	f7ff fd66 	bl	8000744 <_lseek>
 8000c78:	1c43      	adds	r3, r0, #1
 8000c7a:	d102      	bne.n	8000c82 <_lseek_r+0x1e>
 8000c7c:	682b      	ldr	r3, [r5, #0]
 8000c7e:	b103      	cbz	r3, 8000c82 <_lseek_r+0x1e>
 8000c80:	6023      	str	r3, [r4, #0]
 8000c82:	bd38      	pop	{r3, r4, r5, pc}
 8000c84:	200001b8 	.word	0x200001b8

08000c88 <_read_r>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	4d07      	ldr	r5, [pc, #28]	@ (8000ca8 <_read_r+0x20>)
 8000c8c:	4604      	mov	r4, r0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	4611      	mov	r1, r2
 8000c92:	2200      	movs	r2, #0
 8000c94:	602a      	str	r2, [r5, #0]
 8000c96:	461a      	mov	r2, r3
 8000c98:	f7ff fcf4 	bl	8000684 <_read>
 8000c9c:	1c43      	adds	r3, r0, #1
 8000c9e:	d102      	bne.n	8000ca6 <_read_r+0x1e>
 8000ca0:	682b      	ldr	r3, [r5, #0]
 8000ca2:	b103      	cbz	r3, 8000ca6 <_read_r+0x1e>
 8000ca4:	6023      	str	r3, [r4, #0]
 8000ca6:	bd38      	pop	{r3, r4, r5, pc}
 8000ca8:	200001b8 	.word	0x200001b8

08000cac <_write_r>:
 8000cac:	b538      	push	{r3, r4, r5, lr}
 8000cae:	4d07      	ldr	r5, [pc, #28]	@ (8000ccc <_write_r+0x20>)
 8000cb0:	4604      	mov	r4, r0
 8000cb2:	4608      	mov	r0, r1
 8000cb4:	4611      	mov	r1, r2
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	602a      	str	r2, [r5, #0]
 8000cba:	461a      	mov	r2, r3
 8000cbc:	f7ff fcff 	bl	80006be <_write>
 8000cc0:	1c43      	adds	r3, r0, #1
 8000cc2:	d102      	bne.n	8000cca <_write_r+0x1e>
 8000cc4:	682b      	ldr	r3, [r5, #0]
 8000cc6:	b103      	cbz	r3, 8000cca <_write_r+0x1e>
 8000cc8:	6023      	str	r3, [r4, #0]
 8000cca:	bd38      	pop	{r3, r4, r5, pc}
 8000ccc:	200001b8 	.word	0x200001b8

08000cd0 <__errno>:
 8000cd0:	4b01      	ldr	r3, [pc, #4]	@ (8000cd8 <__errno+0x8>)
 8000cd2:	6818      	ldr	r0, [r3, #0]
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	2000000c 	.word	0x2000000c

08000cdc <__libc_init_array>:
 8000cdc:	b570      	push	{r4, r5, r6, lr}
 8000cde:	4d0d      	ldr	r5, [pc, #52]	@ (8000d14 <__libc_init_array+0x38>)
 8000ce0:	4c0d      	ldr	r4, [pc, #52]	@ (8000d18 <__libc_init_array+0x3c>)
 8000ce2:	1b64      	subs	r4, r4, r5
 8000ce4:	10a4      	asrs	r4, r4, #2
 8000ce6:	2600      	movs	r6, #0
 8000ce8:	42a6      	cmp	r6, r4
 8000cea:	d109      	bne.n	8000d00 <__libc_init_array+0x24>
 8000cec:	4d0b      	ldr	r5, [pc, #44]	@ (8000d1c <__libc_init_array+0x40>)
 8000cee:	4c0c      	ldr	r4, [pc, #48]	@ (8000d20 <__libc_init_array+0x44>)
 8000cf0:	f000 fd24 	bl	800173c <_init>
 8000cf4:	1b64      	subs	r4, r4, r5
 8000cf6:	10a4      	asrs	r4, r4, #2
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	42a6      	cmp	r6, r4
 8000cfc:	d105      	bne.n	8000d0a <__libc_init_array+0x2e>
 8000cfe:	bd70      	pop	{r4, r5, r6, pc}
 8000d00:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d04:	4798      	blx	r3
 8000d06:	3601      	adds	r6, #1
 8000d08:	e7ee      	b.n	8000ce8 <__libc_init_array+0xc>
 8000d0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d0e:	4798      	blx	r3
 8000d10:	3601      	adds	r6, #1
 8000d12:	e7f2      	b.n	8000cfa <__libc_init_array+0x1e>
 8000d14:	080017ac 	.word	0x080017ac
 8000d18:	080017ac 	.word	0x080017ac
 8000d1c:	080017ac 	.word	0x080017ac
 8000d20:	080017b0 	.word	0x080017b0

08000d24 <__retarget_lock_init_recursive>:
 8000d24:	4770      	bx	lr

08000d26 <__retarget_lock_acquire_recursive>:
 8000d26:	4770      	bx	lr

08000d28 <__retarget_lock_release_recursive>:
 8000d28:	4770      	bx	lr
	...

08000d2c <_free_r>:
 8000d2c:	b538      	push	{r3, r4, r5, lr}
 8000d2e:	4605      	mov	r5, r0
 8000d30:	2900      	cmp	r1, #0
 8000d32:	d041      	beq.n	8000db8 <_free_r+0x8c>
 8000d34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000d38:	1f0c      	subs	r4, r1, #4
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	bfb8      	it	lt
 8000d3e:	18e4      	addlt	r4, r4, r3
 8000d40:	f000 f8e0 	bl	8000f04 <__malloc_lock>
 8000d44:	4a1d      	ldr	r2, [pc, #116]	@ (8000dbc <_free_r+0x90>)
 8000d46:	6813      	ldr	r3, [r2, #0]
 8000d48:	b933      	cbnz	r3, 8000d58 <_free_r+0x2c>
 8000d4a:	6063      	str	r3, [r4, #4]
 8000d4c:	6014      	str	r4, [r2, #0]
 8000d4e:	4628      	mov	r0, r5
 8000d50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d54:	f000 b8dc 	b.w	8000f10 <__malloc_unlock>
 8000d58:	42a3      	cmp	r3, r4
 8000d5a:	d908      	bls.n	8000d6e <_free_r+0x42>
 8000d5c:	6820      	ldr	r0, [r4, #0]
 8000d5e:	1821      	adds	r1, r4, r0
 8000d60:	428b      	cmp	r3, r1
 8000d62:	bf01      	itttt	eq
 8000d64:	6819      	ldreq	r1, [r3, #0]
 8000d66:	685b      	ldreq	r3, [r3, #4]
 8000d68:	1809      	addeq	r1, r1, r0
 8000d6a:	6021      	streq	r1, [r4, #0]
 8000d6c:	e7ed      	b.n	8000d4a <_free_r+0x1e>
 8000d6e:	461a      	mov	r2, r3
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	b10b      	cbz	r3, 8000d78 <_free_r+0x4c>
 8000d74:	42a3      	cmp	r3, r4
 8000d76:	d9fa      	bls.n	8000d6e <_free_r+0x42>
 8000d78:	6811      	ldr	r1, [r2, #0]
 8000d7a:	1850      	adds	r0, r2, r1
 8000d7c:	42a0      	cmp	r0, r4
 8000d7e:	d10b      	bne.n	8000d98 <_free_r+0x6c>
 8000d80:	6820      	ldr	r0, [r4, #0]
 8000d82:	4401      	add	r1, r0
 8000d84:	1850      	adds	r0, r2, r1
 8000d86:	4283      	cmp	r3, r0
 8000d88:	6011      	str	r1, [r2, #0]
 8000d8a:	d1e0      	bne.n	8000d4e <_free_r+0x22>
 8000d8c:	6818      	ldr	r0, [r3, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	6053      	str	r3, [r2, #4]
 8000d92:	4408      	add	r0, r1
 8000d94:	6010      	str	r0, [r2, #0]
 8000d96:	e7da      	b.n	8000d4e <_free_r+0x22>
 8000d98:	d902      	bls.n	8000da0 <_free_r+0x74>
 8000d9a:	230c      	movs	r3, #12
 8000d9c:	602b      	str	r3, [r5, #0]
 8000d9e:	e7d6      	b.n	8000d4e <_free_r+0x22>
 8000da0:	6820      	ldr	r0, [r4, #0]
 8000da2:	1821      	adds	r1, r4, r0
 8000da4:	428b      	cmp	r3, r1
 8000da6:	bf04      	itt	eq
 8000da8:	6819      	ldreq	r1, [r3, #0]
 8000daa:	685b      	ldreq	r3, [r3, #4]
 8000dac:	6063      	str	r3, [r4, #4]
 8000dae:	bf04      	itt	eq
 8000db0:	1809      	addeq	r1, r1, r0
 8000db2:	6021      	streq	r1, [r4, #0]
 8000db4:	6054      	str	r4, [r2, #4]
 8000db6:	e7ca      	b.n	8000d4e <_free_r+0x22>
 8000db8:	bd38      	pop	{r3, r4, r5, pc}
 8000dba:	bf00      	nop
 8000dbc:	200001c4 	.word	0x200001c4

08000dc0 <sbrk_aligned>:
 8000dc0:	b570      	push	{r4, r5, r6, lr}
 8000dc2:	4e0f      	ldr	r6, [pc, #60]	@ (8000e00 <sbrk_aligned+0x40>)
 8000dc4:	460c      	mov	r4, r1
 8000dc6:	6831      	ldr	r1, [r6, #0]
 8000dc8:	4605      	mov	r5, r0
 8000dca:	b911      	cbnz	r1, 8000dd2 <sbrk_aligned+0x12>
 8000dcc:	f000 fca6 	bl	800171c <_sbrk_r>
 8000dd0:	6030      	str	r0, [r6, #0]
 8000dd2:	4621      	mov	r1, r4
 8000dd4:	4628      	mov	r0, r5
 8000dd6:	f000 fca1 	bl	800171c <_sbrk_r>
 8000dda:	1c43      	adds	r3, r0, #1
 8000ddc:	d103      	bne.n	8000de6 <sbrk_aligned+0x26>
 8000dde:	f04f 34ff 	mov.w	r4, #4294967295
 8000de2:	4620      	mov	r0, r4
 8000de4:	bd70      	pop	{r4, r5, r6, pc}
 8000de6:	1cc4      	adds	r4, r0, #3
 8000de8:	f024 0403 	bic.w	r4, r4, #3
 8000dec:	42a0      	cmp	r0, r4
 8000dee:	d0f8      	beq.n	8000de2 <sbrk_aligned+0x22>
 8000df0:	1a21      	subs	r1, r4, r0
 8000df2:	4628      	mov	r0, r5
 8000df4:	f000 fc92 	bl	800171c <_sbrk_r>
 8000df8:	3001      	adds	r0, #1
 8000dfa:	d1f2      	bne.n	8000de2 <sbrk_aligned+0x22>
 8000dfc:	e7ef      	b.n	8000dde <sbrk_aligned+0x1e>
 8000dfe:	bf00      	nop
 8000e00:	200001c0 	.word	0x200001c0

08000e04 <_malloc_r>:
 8000e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e08:	1ccd      	adds	r5, r1, #3
 8000e0a:	f025 0503 	bic.w	r5, r5, #3
 8000e0e:	3508      	adds	r5, #8
 8000e10:	2d0c      	cmp	r5, #12
 8000e12:	bf38      	it	cc
 8000e14:	250c      	movcc	r5, #12
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	4606      	mov	r6, r0
 8000e1a:	db01      	blt.n	8000e20 <_malloc_r+0x1c>
 8000e1c:	42a9      	cmp	r1, r5
 8000e1e:	d904      	bls.n	8000e2a <_malloc_r+0x26>
 8000e20:	230c      	movs	r3, #12
 8000e22:	6033      	str	r3, [r6, #0]
 8000e24:	2000      	movs	r0, #0
 8000e26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000e2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000f00 <_malloc_r+0xfc>
 8000e2e:	f000 f869 	bl	8000f04 <__malloc_lock>
 8000e32:	f8d8 3000 	ldr.w	r3, [r8]
 8000e36:	461c      	mov	r4, r3
 8000e38:	bb44      	cbnz	r4, 8000e8c <_malloc_r+0x88>
 8000e3a:	4629      	mov	r1, r5
 8000e3c:	4630      	mov	r0, r6
 8000e3e:	f7ff ffbf 	bl	8000dc0 <sbrk_aligned>
 8000e42:	1c43      	adds	r3, r0, #1
 8000e44:	4604      	mov	r4, r0
 8000e46:	d158      	bne.n	8000efa <_malloc_r+0xf6>
 8000e48:	f8d8 4000 	ldr.w	r4, [r8]
 8000e4c:	4627      	mov	r7, r4
 8000e4e:	2f00      	cmp	r7, #0
 8000e50:	d143      	bne.n	8000eda <_malloc_r+0xd6>
 8000e52:	2c00      	cmp	r4, #0
 8000e54:	d04b      	beq.n	8000eee <_malloc_r+0xea>
 8000e56:	6823      	ldr	r3, [r4, #0]
 8000e58:	4639      	mov	r1, r7
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	eb04 0903 	add.w	r9, r4, r3
 8000e60:	f000 fc5c 	bl	800171c <_sbrk_r>
 8000e64:	4581      	cmp	r9, r0
 8000e66:	d142      	bne.n	8000eee <_malloc_r+0xea>
 8000e68:	6821      	ldr	r1, [r4, #0]
 8000e6a:	1a6d      	subs	r5, r5, r1
 8000e6c:	4629      	mov	r1, r5
 8000e6e:	4630      	mov	r0, r6
 8000e70:	f7ff ffa6 	bl	8000dc0 <sbrk_aligned>
 8000e74:	3001      	adds	r0, #1
 8000e76:	d03a      	beq.n	8000eee <_malloc_r+0xea>
 8000e78:	6823      	ldr	r3, [r4, #0]
 8000e7a:	442b      	add	r3, r5
 8000e7c:	6023      	str	r3, [r4, #0]
 8000e7e:	f8d8 3000 	ldr.w	r3, [r8]
 8000e82:	685a      	ldr	r2, [r3, #4]
 8000e84:	bb62      	cbnz	r2, 8000ee0 <_malloc_r+0xdc>
 8000e86:	f8c8 7000 	str.w	r7, [r8]
 8000e8a:	e00f      	b.n	8000eac <_malloc_r+0xa8>
 8000e8c:	6822      	ldr	r2, [r4, #0]
 8000e8e:	1b52      	subs	r2, r2, r5
 8000e90:	d420      	bmi.n	8000ed4 <_malloc_r+0xd0>
 8000e92:	2a0b      	cmp	r2, #11
 8000e94:	d917      	bls.n	8000ec6 <_malloc_r+0xc2>
 8000e96:	1961      	adds	r1, r4, r5
 8000e98:	42a3      	cmp	r3, r4
 8000e9a:	6025      	str	r5, [r4, #0]
 8000e9c:	bf18      	it	ne
 8000e9e:	6059      	strne	r1, [r3, #4]
 8000ea0:	6863      	ldr	r3, [r4, #4]
 8000ea2:	bf08      	it	eq
 8000ea4:	f8c8 1000 	streq.w	r1, [r8]
 8000ea8:	5162      	str	r2, [r4, r5]
 8000eaa:	604b      	str	r3, [r1, #4]
 8000eac:	4630      	mov	r0, r6
 8000eae:	f000 f82f 	bl	8000f10 <__malloc_unlock>
 8000eb2:	f104 000b 	add.w	r0, r4, #11
 8000eb6:	1d23      	adds	r3, r4, #4
 8000eb8:	f020 0007 	bic.w	r0, r0, #7
 8000ebc:	1ac2      	subs	r2, r0, r3
 8000ebe:	bf1c      	itt	ne
 8000ec0:	1a1b      	subne	r3, r3, r0
 8000ec2:	50a3      	strne	r3, [r4, r2]
 8000ec4:	e7af      	b.n	8000e26 <_malloc_r+0x22>
 8000ec6:	6862      	ldr	r2, [r4, #4]
 8000ec8:	42a3      	cmp	r3, r4
 8000eca:	bf0c      	ite	eq
 8000ecc:	f8c8 2000 	streq.w	r2, [r8]
 8000ed0:	605a      	strne	r2, [r3, #4]
 8000ed2:	e7eb      	b.n	8000eac <_malloc_r+0xa8>
 8000ed4:	4623      	mov	r3, r4
 8000ed6:	6864      	ldr	r4, [r4, #4]
 8000ed8:	e7ae      	b.n	8000e38 <_malloc_r+0x34>
 8000eda:	463c      	mov	r4, r7
 8000edc:	687f      	ldr	r7, [r7, #4]
 8000ede:	e7b6      	b.n	8000e4e <_malloc_r+0x4a>
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	42a3      	cmp	r3, r4
 8000ee6:	d1fb      	bne.n	8000ee0 <_malloc_r+0xdc>
 8000ee8:	2300      	movs	r3, #0
 8000eea:	6053      	str	r3, [r2, #4]
 8000eec:	e7de      	b.n	8000eac <_malloc_r+0xa8>
 8000eee:	230c      	movs	r3, #12
 8000ef0:	6033      	str	r3, [r6, #0]
 8000ef2:	4630      	mov	r0, r6
 8000ef4:	f000 f80c 	bl	8000f10 <__malloc_unlock>
 8000ef8:	e794      	b.n	8000e24 <_malloc_r+0x20>
 8000efa:	6005      	str	r5, [r0, #0]
 8000efc:	e7d6      	b.n	8000eac <_malloc_r+0xa8>
 8000efe:	bf00      	nop
 8000f00:	200001c4 	.word	0x200001c4

08000f04 <__malloc_lock>:
 8000f04:	4801      	ldr	r0, [pc, #4]	@ (8000f0c <__malloc_lock+0x8>)
 8000f06:	f7ff bf0e 	b.w	8000d26 <__retarget_lock_acquire_recursive>
 8000f0a:	bf00      	nop
 8000f0c:	200001bc 	.word	0x200001bc

08000f10 <__malloc_unlock>:
 8000f10:	4801      	ldr	r0, [pc, #4]	@ (8000f18 <__malloc_unlock+0x8>)
 8000f12:	f7ff bf09 	b.w	8000d28 <__retarget_lock_release_recursive>
 8000f16:	bf00      	nop
 8000f18:	200001bc 	.word	0x200001bc

08000f1c <__sfputc_r>:
 8000f1c:	6893      	ldr	r3, [r2, #8]
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	b410      	push	{r4}
 8000f24:	6093      	str	r3, [r2, #8]
 8000f26:	da08      	bge.n	8000f3a <__sfputc_r+0x1e>
 8000f28:	6994      	ldr	r4, [r2, #24]
 8000f2a:	42a3      	cmp	r3, r4
 8000f2c:	db01      	blt.n	8000f32 <__sfputc_r+0x16>
 8000f2e:	290a      	cmp	r1, #10
 8000f30:	d103      	bne.n	8000f3a <__sfputc_r+0x1e>
 8000f32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f36:	f7ff bde8 	b.w	8000b0a <__swbuf_r>
 8000f3a:	6813      	ldr	r3, [r2, #0]
 8000f3c:	1c58      	adds	r0, r3, #1
 8000f3e:	6010      	str	r0, [r2, #0]
 8000f40:	7019      	strb	r1, [r3, #0]
 8000f42:	4608      	mov	r0, r1
 8000f44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <__sfputs_r>:
 8000f4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f4c:	4606      	mov	r6, r0
 8000f4e:	460f      	mov	r7, r1
 8000f50:	4614      	mov	r4, r2
 8000f52:	18d5      	adds	r5, r2, r3
 8000f54:	42ac      	cmp	r4, r5
 8000f56:	d101      	bne.n	8000f5c <__sfputs_r+0x12>
 8000f58:	2000      	movs	r0, #0
 8000f5a:	e007      	b.n	8000f6c <__sfputs_r+0x22>
 8000f5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f60:	463a      	mov	r2, r7
 8000f62:	4630      	mov	r0, r6
 8000f64:	f7ff ffda 	bl	8000f1c <__sfputc_r>
 8000f68:	1c43      	adds	r3, r0, #1
 8000f6a:	d1f3      	bne.n	8000f54 <__sfputs_r+0xa>
 8000f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000f70 <_vfiprintf_r>:
 8000f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f74:	460d      	mov	r5, r1
 8000f76:	b09d      	sub	sp, #116	@ 0x74
 8000f78:	4614      	mov	r4, r2
 8000f7a:	4698      	mov	r8, r3
 8000f7c:	4606      	mov	r6, r0
 8000f7e:	b118      	cbz	r0, 8000f88 <_vfiprintf_r+0x18>
 8000f80:	6a03      	ldr	r3, [r0, #32]
 8000f82:	b90b      	cbnz	r3, 8000f88 <_vfiprintf_r+0x18>
 8000f84:	f7ff fcd8 	bl	8000938 <__sinit>
 8000f88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000f8a:	07d9      	lsls	r1, r3, #31
 8000f8c:	d405      	bmi.n	8000f9a <_vfiprintf_r+0x2a>
 8000f8e:	89ab      	ldrh	r3, [r5, #12]
 8000f90:	059a      	lsls	r2, r3, #22
 8000f92:	d402      	bmi.n	8000f9a <_vfiprintf_r+0x2a>
 8000f94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000f96:	f7ff fec6 	bl	8000d26 <__retarget_lock_acquire_recursive>
 8000f9a:	89ab      	ldrh	r3, [r5, #12]
 8000f9c:	071b      	lsls	r3, r3, #28
 8000f9e:	d501      	bpl.n	8000fa4 <_vfiprintf_r+0x34>
 8000fa0:	692b      	ldr	r3, [r5, #16]
 8000fa2:	b99b      	cbnz	r3, 8000fcc <_vfiprintf_r+0x5c>
 8000fa4:	4629      	mov	r1, r5
 8000fa6:	4630      	mov	r0, r6
 8000fa8:	f7ff fdee 	bl	8000b88 <__swsetup_r>
 8000fac:	b170      	cbz	r0, 8000fcc <_vfiprintf_r+0x5c>
 8000fae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000fb0:	07dc      	lsls	r4, r3, #31
 8000fb2:	d504      	bpl.n	8000fbe <_vfiprintf_r+0x4e>
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb8:	b01d      	add	sp, #116	@ 0x74
 8000fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fbe:	89ab      	ldrh	r3, [r5, #12]
 8000fc0:	0598      	lsls	r0, r3, #22
 8000fc2:	d4f7      	bmi.n	8000fb4 <_vfiprintf_r+0x44>
 8000fc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000fc6:	f7ff feaf 	bl	8000d28 <__retarget_lock_release_recursive>
 8000fca:	e7f3      	b.n	8000fb4 <_vfiprintf_r+0x44>
 8000fcc:	2300      	movs	r3, #0
 8000fce:	9309      	str	r3, [sp, #36]	@ 0x24
 8000fd0:	2320      	movs	r3, #32
 8000fd2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000fd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8000fda:	2330      	movs	r3, #48	@ 0x30
 8000fdc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800118c <_vfiprintf_r+0x21c>
 8000fe0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000fe4:	f04f 0901 	mov.w	r9, #1
 8000fe8:	4623      	mov	r3, r4
 8000fea:	469a      	mov	sl, r3
 8000fec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000ff0:	b10a      	cbz	r2, 8000ff6 <_vfiprintf_r+0x86>
 8000ff2:	2a25      	cmp	r2, #37	@ 0x25
 8000ff4:	d1f9      	bne.n	8000fea <_vfiprintf_r+0x7a>
 8000ff6:	ebba 0b04 	subs.w	fp, sl, r4
 8000ffa:	d00b      	beq.n	8001014 <_vfiprintf_r+0xa4>
 8000ffc:	465b      	mov	r3, fp
 8000ffe:	4622      	mov	r2, r4
 8001000:	4629      	mov	r1, r5
 8001002:	4630      	mov	r0, r6
 8001004:	f7ff ffa1 	bl	8000f4a <__sfputs_r>
 8001008:	3001      	adds	r0, #1
 800100a:	f000 80a7 	beq.w	800115c <_vfiprintf_r+0x1ec>
 800100e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001010:	445a      	add	r2, fp
 8001012:	9209      	str	r2, [sp, #36]	@ 0x24
 8001014:	f89a 3000 	ldrb.w	r3, [sl]
 8001018:	2b00      	cmp	r3, #0
 800101a:	f000 809f 	beq.w	800115c <_vfiprintf_r+0x1ec>
 800101e:	2300      	movs	r3, #0
 8001020:	f04f 32ff 	mov.w	r2, #4294967295
 8001024:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001028:	f10a 0a01 	add.w	sl, sl, #1
 800102c:	9304      	str	r3, [sp, #16]
 800102e:	9307      	str	r3, [sp, #28]
 8001030:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001034:	931a      	str	r3, [sp, #104]	@ 0x68
 8001036:	4654      	mov	r4, sl
 8001038:	2205      	movs	r2, #5
 800103a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800103e:	4853      	ldr	r0, [pc, #332]	@ (800118c <_vfiprintf_r+0x21c>)
 8001040:	f7ff f8c6 	bl	80001d0 <memchr>
 8001044:	9a04      	ldr	r2, [sp, #16]
 8001046:	b9d8      	cbnz	r0, 8001080 <_vfiprintf_r+0x110>
 8001048:	06d1      	lsls	r1, r2, #27
 800104a:	bf44      	itt	mi
 800104c:	2320      	movmi	r3, #32
 800104e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001052:	0713      	lsls	r3, r2, #28
 8001054:	bf44      	itt	mi
 8001056:	232b      	movmi	r3, #43	@ 0x2b
 8001058:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800105c:	f89a 3000 	ldrb.w	r3, [sl]
 8001060:	2b2a      	cmp	r3, #42	@ 0x2a
 8001062:	d015      	beq.n	8001090 <_vfiprintf_r+0x120>
 8001064:	9a07      	ldr	r2, [sp, #28]
 8001066:	4654      	mov	r4, sl
 8001068:	2000      	movs	r0, #0
 800106a:	f04f 0c0a 	mov.w	ip, #10
 800106e:	4621      	mov	r1, r4
 8001070:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001074:	3b30      	subs	r3, #48	@ 0x30
 8001076:	2b09      	cmp	r3, #9
 8001078:	d94b      	bls.n	8001112 <_vfiprintf_r+0x1a2>
 800107a:	b1b0      	cbz	r0, 80010aa <_vfiprintf_r+0x13a>
 800107c:	9207      	str	r2, [sp, #28]
 800107e:	e014      	b.n	80010aa <_vfiprintf_r+0x13a>
 8001080:	eba0 0308 	sub.w	r3, r0, r8
 8001084:	fa09 f303 	lsl.w	r3, r9, r3
 8001088:	4313      	orrs	r3, r2
 800108a:	9304      	str	r3, [sp, #16]
 800108c:	46a2      	mov	sl, r4
 800108e:	e7d2      	b.n	8001036 <_vfiprintf_r+0xc6>
 8001090:	9b03      	ldr	r3, [sp, #12]
 8001092:	1d19      	adds	r1, r3, #4
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	9103      	str	r1, [sp, #12]
 8001098:	2b00      	cmp	r3, #0
 800109a:	bfbb      	ittet	lt
 800109c:	425b      	neglt	r3, r3
 800109e:	f042 0202 	orrlt.w	r2, r2, #2
 80010a2:	9307      	strge	r3, [sp, #28]
 80010a4:	9307      	strlt	r3, [sp, #28]
 80010a6:	bfb8      	it	lt
 80010a8:	9204      	strlt	r2, [sp, #16]
 80010aa:	7823      	ldrb	r3, [r4, #0]
 80010ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80010ae:	d10a      	bne.n	80010c6 <_vfiprintf_r+0x156>
 80010b0:	7863      	ldrb	r3, [r4, #1]
 80010b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80010b4:	d132      	bne.n	800111c <_vfiprintf_r+0x1ac>
 80010b6:	9b03      	ldr	r3, [sp, #12]
 80010b8:	1d1a      	adds	r2, r3, #4
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	9203      	str	r2, [sp, #12]
 80010be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80010c2:	3402      	adds	r4, #2
 80010c4:	9305      	str	r3, [sp, #20]
 80010c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800119c <_vfiprintf_r+0x22c>
 80010ca:	7821      	ldrb	r1, [r4, #0]
 80010cc:	2203      	movs	r2, #3
 80010ce:	4650      	mov	r0, sl
 80010d0:	f7ff f87e 	bl	80001d0 <memchr>
 80010d4:	b138      	cbz	r0, 80010e6 <_vfiprintf_r+0x176>
 80010d6:	9b04      	ldr	r3, [sp, #16]
 80010d8:	eba0 000a 	sub.w	r0, r0, sl
 80010dc:	2240      	movs	r2, #64	@ 0x40
 80010de:	4082      	lsls	r2, r0
 80010e0:	4313      	orrs	r3, r2
 80010e2:	3401      	adds	r4, #1
 80010e4:	9304      	str	r3, [sp, #16]
 80010e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80010ea:	4829      	ldr	r0, [pc, #164]	@ (8001190 <_vfiprintf_r+0x220>)
 80010ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80010f0:	2206      	movs	r2, #6
 80010f2:	f7ff f86d 	bl	80001d0 <memchr>
 80010f6:	2800      	cmp	r0, #0
 80010f8:	d03f      	beq.n	800117a <_vfiprintf_r+0x20a>
 80010fa:	4b26      	ldr	r3, [pc, #152]	@ (8001194 <_vfiprintf_r+0x224>)
 80010fc:	bb1b      	cbnz	r3, 8001146 <_vfiprintf_r+0x1d6>
 80010fe:	9b03      	ldr	r3, [sp, #12]
 8001100:	3307      	adds	r3, #7
 8001102:	f023 0307 	bic.w	r3, r3, #7
 8001106:	3308      	adds	r3, #8
 8001108:	9303      	str	r3, [sp, #12]
 800110a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800110c:	443b      	add	r3, r7
 800110e:	9309      	str	r3, [sp, #36]	@ 0x24
 8001110:	e76a      	b.n	8000fe8 <_vfiprintf_r+0x78>
 8001112:	fb0c 3202 	mla	r2, ip, r2, r3
 8001116:	460c      	mov	r4, r1
 8001118:	2001      	movs	r0, #1
 800111a:	e7a8      	b.n	800106e <_vfiprintf_r+0xfe>
 800111c:	2300      	movs	r3, #0
 800111e:	3401      	adds	r4, #1
 8001120:	9305      	str	r3, [sp, #20]
 8001122:	4619      	mov	r1, r3
 8001124:	f04f 0c0a 	mov.w	ip, #10
 8001128:	4620      	mov	r0, r4
 800112a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800112e:	3a30      	subs	r2, #48	@ 0x30
 8001130:	2a09      	cmp	r2, #9
 8001132:	d903      	bls.n	800113c <_vfiprintf_r+0x1cc>
 8001134:	2b00      	cmp	r3, #0
 8001136:	d0c6      	beq.n	80010c6 <_vfiprintf_r+0x156>
 8001138:	9105      	str	r1, [sp, #20]
 800113a:	e7c4      	b.n	80010c6 <_vfiprintf_r+0x156>
 800113c:	fb0c 2101 	mla	r1, ip, r1, r2
 8001140:	4604      	mov	r4, r0
 8001142:	2301      	movs	r3, #1
 8001144:	e7f0      	b.n	8001128 <_vfiprintf_r+0x1b8>
 8001146:	ab03      	add	r3, sp, #12
 8001148:	9300      	str	r3, [sp, #0]
 800114a:	462a      	mov	r2, r5
 800114c:	4b12      	ldr	r3, [pc, #72]	@ (8001198 <_vfiprintf_r+0x228>)
 800114e:	a904      	add	r1, sp, #16
 8001150:	4630      	mov	r0, r6
 8001152:	f3af 8000 	nop.w
 8001156:	4607      	mov	r7, r0
 8001158:	1c78      	adds	r0, r7, #1
 800115a:	d1d6      	bne.n	800110a <_vfiprintf_r+0x19a>
 800115c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800115e:	07d9      	lsls	r1, r3, #31
 8001160:	d405      	bmi.n	800116e <_vfiprintf_r+0x1fe>
 8001162:	89ab      	ldrh	r3, [r5, #12]
 8001164:	059a      	lsls	r2, r3, #22
 8001166:	d402      	bmi.n	800116e <_vfiprintf_r+0x1fe>
 8001168:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800116a:	f7ff fddd 	bl	8000d28 <__retarget_lock_release_recursive>
 800116e:	89ab      	ldrh	r3, [r5, #12]
 8001170:	065b      	lsls	r3, r3, #25
 8001172:	f53f af1f 	bmi.w	8000fb4 <_vfiprintf_r+0x44>
 8001176:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001178:	e71e      	b.n	8000fb8 <_vfiprintf_r+0x48>
 800117a:	ab03      	add	r3, sp, #12
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	462a      	mov	r2, r5
 8001180:	4b05      	ldr	r3, [pc, #20]	@ (8001198 <_vfiprintf_r+0x228>)
 8001182:	a904      	add	r1, sp, #16
 8001184:	4630      	mov	r0, r6
 8001186:	f000 f879 	bl	800127c <_printf_i>
 800118a:	e7e4      	b.n	8001156 <_vfiprintf_r+0x1e6>
 800118c:	08001771 	.word	0x08001771
 8001190:	0800177b 	.word	0x0800177b
 8001194:	00000000 	.word	0x00000000
 8001198:	08000f4b 	.word	0x08000f4b
 800119c:	08001777 	.word	0x08001777

080011a0 <_printf_common>:
 80011a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011a4:	4616      	mov	r6, r2
 80011a6:	4698      	mov	r8, r3
 80011a8:	688a      	ldr	r2, [r1, #8]
 80011aa:	690b      	ldr	r3, [r1, #16]
 80011ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80011b0:	4293      	cmp	r3, r2
 80011b2:	bfb8      	it	lt
 80011b4:	4613      	movlt	r3, r2
 80011b6:	6033      	str	r3, [r6, #0]
 80011b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80011bc:	4607      	mov	r7, r0
 80011be:	460c      	mov	r4, r1
 80011c0:	b10a      	cbz	r2, 80011c6 <_printf_common+0x26>
 80011c2:	3301      	adds	r3, #1
 80011c4:	6033      	str	r3, [r6, #0]
 80011c6:	6823      	ldr	r3, [r4, #0]
 80011c8:	0699      	lsls	r1, r3, #26
 80011ca:	bf42      	ittt	mi
 80011cc:	6833      	ldrmi	r3, [r6, #0]
 80011ce:	3302      	addmi	r3, #2
 80011d0:	6033      	strmi	r3, [r6, #0]
 80011d2:	6825      	ldr	r5, [r4, #0]
 80011d4:	f015 0506 	ands.w	r5, r5, #6
 80011d8:	d106      	bne.n	80011e8 <_printf_common+0x48>
 80011da:	f104 0a19 	add.w	sl, r4, #25
 80011de:	68e3      	ldr	r3, [r4, #12]
 80011e0:	6832      	ldr	r2, [r6, #0]
 80011e2:	1a9b      	subs	r3, r3, r2
 80011e4:	42ab      	cmp	r3, r5
 80011e6:	dc26      	bgt.n	8001236 <_printf_common+0x96>
 80011e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80011ec:	6822      	ldr	r2, [r4, #0]
 80011ee:	3b00      	subs	r3, #0
 80011f0:	bf18      	it	ne
 80011f2:	2301      	movne	r3, #1
 80011f4:	0692      	lsls	r2, r2, #26
 80011f6:	d42b      	bmi.n	8001250 <_printf_common+0xb0>
 80011f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80011fc:	4641      	mov	r1, r8
 80011fe:	4638      	mov	r0, r7
 8001200:	47c8      	blx	r9
 8001202:	3001      	adds	r0, #1
 8001204:	d01e      	beq.n	8001244 <_printf_common+0xa4>
 8001206:	6823      	ldr	r3, [r4, #0]
 8001208:	6922      	ldr	r2, [r4, #16]
 800120a:	f003 0306 	and.w	r3, r3, #6
 800120e:	2b04      	cmp	r3, #4
 8001210:	bf02      	ittt	eq
 8001212:	68e5      	ldreq	r5, [r4, #12]
 8001214:	6833      	ldreq	r3, [r6, #0]
 8001216:	1aed      	subeq	r5, r5, r3
 8001218:	68a3      	ldr	r3, [r4, #8]
 800121a:	bf0c      	ite	eq
 800121c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001220:	2500      	movne	r5, #0
 8001222:	4293      	cmp	r3, r2
 8001224:	bfc4      	itt	gt
 8001226:	1a9b      	subgt	r3, r3, r2
 8001228:	18ed      	addgt	r5, r5, r3
 800122a:	2600      	movs	r6, #0
 800122c:	341a      	adds	r4, #26
 800122e:	42b5      	cmp	r5, r6
 8001230:	d11a      	bne.n	8001268 <_printf_common+0xc8>
 8001232:	2000      	movs	r0, #0
 8001234:	e008      	b.n	8001248 <_printf_common+0xa8>
 8001236:	2301      	movs	r3, #1
 8001238:	4652      	mov	r2, sl
 800123a:	4641      	mov	r1, r8
 800123c:	4638      	mov	r0, r7
 800123e:	47c8      	blx	r9
 8001240:	3001      	adds	r0, #1
 8001242:	d103      	bne.n	800124c <_printf_common+0xac>
 8001244:	f04f 30ff 	mov.w	r0, #4294967295
 8001248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800124c:	3501      	adds	r5, #1
 800124e:	e7c6      	b.n	80011de <_printf_common+0x3e>
 8001250:	18e1      	adds	r1, r4, r3
 8001252:	1c5a      	adds	r2, r3, #1
 8001254:	2030      	movs	r0, #48	@ 0x30
 8001256:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800125a:	4422      	add	r2, r4
 800125c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001260:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001264:	3302      	adds	r3, #2
 8001266:	e7c7      	b.n	80011f8 <_printf_common+0x58>
 8001268:	2301      	movs	r3, #1
 800126a:	4622      	mov	r2, r4
 800126c:	4641      	mov	r1, r8
 800126e:	4638      	mov	r0, r7
 8001270:	47c8      	blx	r9
 8001272:	3001      	adds	r0, #1
 8001274:	d0e6      	beq.n	8001244 <_printf_common+0xa4>
 8001276:	3601      	adds	r6, #1
 8001278:	e7d9      	b.n	800122e <_printf_common+0x8e>
	...

0800127c <_printf_i>:
 800127c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001280:	7e0f      	ldrb	r7, [r1, #24]
 8001282:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001284:	2f78      	cmp	r7, #120	@ 0x78
 8001286:	4691      	mov	r9, r2
 8001288:	4680      	mov	r8, r0
 800128a:	460c      	mov	r4, r1
 800128c:	469a      	mov	sl, r3
 800128e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001292:	d807      	bhi.n	80012a4 <_printf_i+0x28>
 8001294:	2f62      	cmp	r7, #98	@ 0x62
 8001296:	d80a      	bhi.n	80012ae <_printf_i+0x32>
 8001298:	2f00      	cmp	r7, #0
 800129a:	f000 80d2 	beq.w	8001442 <_printf_i+0x1c6>
 800129e:	2f58      	cmp	r7, #88	@ 0x58
 80012a0:	f000 80b9 	beq.w	8001416 <_printf_i+0x19a>
 80012a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80012a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80012ac:	e03a      	b.n	8001324 <_printf_i+0xa8>
 80012ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80012b2:	2b15      	cmp	r3, #21
 80012b4:	d8f6      	bhi.n	80012a4 <_printf_i+0x28>
 80012b6:	a101      	add	r1, pc, #4	@ (adr r1, 80012bc <_printf_i+0x40>)
 80012b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80012bc:	08001315 	.word	0x08001315
 80012c0:	08001329 	.word	0x08001329
 80012c4:	080012a5 	.word	0x080012a5
 80012c8:	080012a5 	.word	0x080012a5
 80012cc:	080012a5 	.word	0x080012a5
 80012d0:	080012a5 	.word	0x080012a5
 80012d4:	08001329 	.word	0x08001329
 80012d8:	080012a5 	.word	0x080012a5
 80012dc:	080012a5 	.word	0x080012a5
 80012e0:	080012a5 	.word	0x080012a5
 80012e4:	080012a5 	.word	0x080012a5
 80012e8:	08001429 	.word	0x08001429
 80012ec:	08001353 	.word	0x08001353
 80012f0:	080013e3 	.word	0x080013e3
 80012f4:	080012a5 	.word	0x080012a5
 80012f8:	080012a5 	.word	0x080012a5
 80012fc:	0800144b 	.word	0x0800144b
 8001300:	080012a5 	.word	0x080012a5
 8001304:	08001353 	.word	0x08001353
 8001308:	080012a5 	.word	0x080012a5
 800130c:	080012a5 	.word	0x080012a5
 8001310:	080013eb 	.word	0x080013eb
 8001314:	6833      	ldr	r3, [r6, #0]
 8001316:	1d1a      	adds	r2, r3, #4
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	6032      	str	r2, [r6, #0]
 800131c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001320:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001324:	2301      	movs	r3, #1
 8001326:	e09d      	b.n	8001464 <_printf_i+0x1e8>
 8001328:	6833      	ldr	r3, [r6, #0]
 800132a:	6820      	ldr	r0, [r4, #0]
 800132c:	1d19      	adds	r1, r3, #4
 800132e:	6031      	str	r1, [r6, #0]
 8001330:	0606      	lsls	r6, r0, #24
 8001332:	d501      	bpl.n	8001338 <_printf_i+0xbc>
 8001334:	681d      	ldr	r5, [r3, #0]
 8001336:	e003      	b.n	8001340 <_printf_i+0xc4>
 8001338:	0645      	lsls	r5, r0, #25
 800133a:	d5fb      	bpl.n	8001334 <_printf_i+0xb8>
 800133c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001340:	2d00      	cmp	r5, #0
 8001342:	da03      	bge.n	800134c <_printf_i+0xd0>
 8001344:	232d      	movs	r3, #45	@ 0x2d
 8001346:	426d      	negs	r5, r5
 8001348:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800134c:	4859      	ldr	r0, [pc, #356]	@ (80014b4 <_printf_i+0x238>)
 800134e:	230a      	movs	r3, #10
 8001350:	e011      	b.n	8001376 <_printf_i+0xfa>
 8001352:	6821      	ldr	r1, [r4, #0]
 8001354:	6833      	ldr	r3, [r6, #0]
 8001356:	0608      	lsls	r0, r1, #24
 8001358:	f853 5b04 	ldr.w	r5, [r3], #4
 800135c:	d402      	bmi.n	8001364 <_printf_i+0xe8>
 800135e:	0649      	lsls	r1, r1, #25
 8001360:	bf48      	it	mi
 8001362:	b2ad      	uxthmi	r5, r5
 8001364:	2f6f      	cmp	r7, #111	@ 0x6f
 8001366:	4853      	ldr	r0, [pc, #332]	@ (80014b4 <_printf_i+0x238>)
 8001368:	6033      	str	r3, [r6, #0]
 800136a:	bf14      	ite	ne
 800136c:	230a      	movne	r3, #10
 800136e:	2308      	moveq	r3, #8
 8001370:	2100      	movs	r1, #0
 8001372:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001376:	6866      	ldr	r6, [r4, #4]
 8001378:	60a6      	str	r6, [r4, #8]
 800137a:	2e00      	cmp	r6, #0
 800137c:	bfa2      	ittt	ge
 800137e:	6821      	ldrge	r1, [r4, #0]
 8001380:	f021 0104 	bicge.w	r1, r1, #4
 8001384:	6021      	strge	r1, [r4, #0]
 8001386:	b90d      	cbnz	r5, 800138c <_printf_i+0x110>
 8001388:	2e00      	cmp	r6, #0
 800138a:	d04b      	beq.n	8001424 <_printf_i+0x1a8>
 800138c:	4616      	mov	r6, r2
 800138e:	fbb5 f1f3 	udiv	r1, r5, r3
 8001392:	fb03 5711 	mls	r7, r3, r1, r5
 8001396:	5dc7      	ldrb	r7, [r0, r7]
 8001398:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800139c:	462f      	mov	r7, r5
 800139e:	42bb      	cmp	r3, r7
 80013a0:	460d      	mov	r5, r1
 80013a2:	d9f4      	bls.n	800138e <_printf_i+0x112>
 80013a4:	2b08      	cmp	r3, #8
 80013a6:	d10b      	bne.n	80013c0 <_printf_i+0x144>
 80013a8:	6823      	ldr	r3, [r4, #0]
 80013aa:	07df      	lsls	r7, r3, #31
 80013ac:	d508      	bpl.n	80013c0 <_printf_i+0x144>
 80013ae:	6923      	ldr	r3, [r4, #16]
 80013b0:	6861      	ldr	r1, [r4, #4]
 80013b2:	4299      	cmp	r1, r3
 80013b4:	bfde      	ittt	le
 80013b6:	2330      	movle	r3, #48	@ 0x30
 80013b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80013bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80013c0:	1b92      	subs	r2, r2, r6
 80013c2:	6122      	str	r2, [r4, #16]
 80013c4:	f8cd a000 	str.w	sl, [sp]
 80013c8:	464b      	mov	r3, r9
 80013ca:	aa03      	add	r2, sp, #12
 80013cc:	4621      	mov	r1, r4
 80013ce:	4640      	mov	r0, r8
 80013d0:	f7ff fee6 	bl	80011a0 <_printf_common>
 80013d4:	3001      	adds	r0, #1
 80013d6:	d14a      	bne.n	800146e <_printf_i+0x1f2>
 80013d8:	f04f 30ff 	mov.w	r0, #4294967295
 80013dc:	b004      	add	sp, #16
 80013de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013e2:	6823      	ldr	r3, [r4, #0]
 80013e4:	f043 0320 	orr.w	r3, r3, #32
 80013e8:	6023      	str	r3, [r4, #0]
 80013ea:	4833      	ldr	r0, [pc, #204]	@ (80014b8 <_printf_i+0x23c>)
 80013ec:	2778      	movs	r7, #120	@ 0x78
 80013ee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80013f2:	6823      	ldr	r3, [r4, #0]
 80013f4:	6831      	ldr	r1, [r6, #0]
 80013f6:	061f      	lsls	r7, r3, #24
 80013f8:	f851 5b04 	ldr.w	r5, [r1], #4
 80013fc:	d402      	bmi.n	8001404 <_printf_i+0x188>
 80013fe:	065f      	lsls	r7, r3, #25
 8001400:	bf48      	it	mi
 8001402:	b2ad      	uxthmi	r5, r5
 8001404:	6031      	str	r1, [r6, #0]
 8001406:	07d9      	lsls	r1, r3, #31
 8001408:	bf44      	itt	mi
 800140a:	f043 0320 	orrmi.w	r3, r3, #32
 800140e:	6023      	strmi	r3, [r4, #0]
 8001410:	b11d      	cbz	r5, 800141a <_printf_i+0x19e>
 8001412:	2310      	movs	r3, #16
 8001414:	e7ac      	b.n	8001370 <_printf_i+0xf4>
 8001416:	4827      	ldr	r0, [pc, #156]	@ (80014b4 <_printf_i+0x238>)
 8001418:	e7e9      	b.n	80013ee <_printf_i+0x172>
 800141a:	6823      	ldr	r3, [r4, #0]
 800141c:	f023 0320 	bic.w	r3, r3, #32
 8001420:	6023      	str	r3, [r4, #0]
 8001422:	e7f6      	b.n	8001412 <_printf_i+0x196>
 8001424:	4616      	mov	r6, r2
 8001426:	e7bd      	b.n	80013a4 <_printf_i+0x128>
 8001428:	6833      	ldr	r3, [r6, #0]
 800142a:	6825      	ldr	r5, [r4, #0]
 800142c:	6961      	ldr	r1, [r4, #20]
 800142e:	1d18      	adds	r0, r3, #4
 8001430:	6030      	str	r0, [r6, #0]
 8001432:	062e      	lsls	r6, r5, #24
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	d501      	bpl.n	800143c <_printf_i+0x1c0>
 8001438:	6019      	str	r1, [r3, #0]
 800143a:	e002      	b.n	8001442 <_printf_i+0x1c6>
 800143c:	0668      	lsls	r0, r5, #25
 800143e:	d5fb      	bpl.n	8001438 <_printf_i+0x1bc>
 8001440:	8019      	strh	r1, [r3, #0]
 8001442:	2300      	movs	r3, #0
 8001444:	6123      	str	r3, [r4, #16]
 8001446:	4616      	mov	r6, r2
 8001448:	e7bc      	b.n	80013c4 <_printf_i+0x148>
 800144a:	6833      	ldr	r3, [r6, #0]
 800144c:	1d1a      	adds	r2, r3, #4
 800144e:	6032      	str	r2, [r6, #0]
 8001450:	681e      	ldr	r6, [r3, #0]
 8001452:	6862      	ldr	r2, [r4, #4]
 8001454:	2100      	movs	r1, #0
 8001456:	4630      	mov	r0, r6
 8001458:	f7fe feba 	bl	80001d0 <memchr>
 800145c:	b108      	cbz	r0, 8001462 <_printf_i+0x1e6>
 800145e:	1b80      	subs	r0, r0, r6
 8001460:	6060      	str	r0, [r4, #4]
 8001462:	6863      	ldr	r3, [r4, #4]
 8001464:	6123      	str	r3, [r4, #16]
 8001466:	2300      	movs	r3, #0
 8001468:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800146c:	e7aa      	b.n	80013c4 <_printf_i+0x148>
 800146e:	6923      	ldr	r3, [r4, #16]
 8001470:	4632      	mov	r2, r6
 8001472:	4649      	mov	r1, r9
 8001474:	4640      	mov	r0, r8
 8001476:	47d0      	blx	sl
 8001478:	3001      	adds	r0, #1
 800147a:	d0ad      	beq.n	80013d8 <_printf_i+0x15c>
 800147c:	6823      	ldr	r3, [r4, #0]
 800147e:	079b      	lsls	r3, r3, #30
 8001480:	d413      	bmi.n	80014aa <_printf_i+0x22e>
 8001482:	68e0      	ldr	r0, [r4, #12]
 8001484:	9b03      	ldr	r3, [sp, #12]
 8001486:	4298      	cmp	r0, r3
 8001488:	bfb8      	it	lt
 800148a:	4618      	movlt	r0, r3
 800148c:	e7a6      	b.n	80013dc <_printf_i+0x160>
 800148e:	2301      	movs	r3, #1
 8001490:	4632      	mov	r2, r6
 8001492:	4649      	mov	r1, r9
 8001494:	4640      	mov	r0, r8
 8001496:	47d0      	blx	sl
 8001498:	3001      	adds	r0, #1
 800149a:	d09d      	beq.n	80013d8 <_printf_i+0x15c>
 800149c:	3501      	adds	r5, #1
 800149e:	68e3      	ldr	r3, [r4, #12]
 80014a0:	9903      	ldr	r1, [sp, #12]
 80014a2:	1a5b      	subs	r3, r3, r1
 80014a4:	42ab      	cmp	r3, r5
 80014a6:	dcf2      	bgt.n	800148e <_printf_i+0x212>
 80014a8:	e7eb      	b.n	8001482 <_printf_i+0x206>
 80014aa:	2500      	movs	r5, #0
 80014ac:	f104 0619 	add.w	r6, r4, #25
 80014b0:	e7f5      	b.n	800149e <_printf_i+0x222>
 80014b2:	bf00      	nop
 80014b4:	08001782 	.word	0x08001782
 80014b8:	08001793 	.word	0x08001793

080014bc <__sflush_r>:
 80014bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80014c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014c4:	0716      	lsls	r6, r2, #28
 80014c6:	4605      	mov	r5, r0
 80014c8:	460c      	mov	r4, r1
 80014ca:	d454      	bmi.n	8001576 <__sflush_r+0xba>
 80014cc:	684b      	ldr	r3, [r1, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	dc02      	bgt.n	80014d8 <__sflush_r+0x1c>
 80014d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	dd48      	ble.n	800156a <__sflush_r+0xae>
 80014d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80014da:	2e00      	cmp	r6, #0
 80014dc:	d045      	beq.n	800156a <__sflush_r+0xae>
 80014de:	2300      	movs	r3, #0
 80014e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80014e4:	682f      	ldr	r7, [r5, #0]
 80014e6:	6a21      	ldr	r1, [r4, #32]
 80014e8:	602b      	str	r3, [r5, #0]
 80014ea:	d030      	beq.n	800154e <__sflush_r+0x92>
 80014ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80014ee:	89a3      	ldrh	r3, [r4, #12]
 80014f0:	0759      	lsls	r1, r3, #29
 80014f2:	d505      	bpl.n	8001500 <__sflush_r+0x44>
 80014f4:	6863      	ldr	r3, [r4, #4]
 80014f6:	1ad2      	subs	r2, r2, r3
 80014f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80014fa:	b10b      	cbz	r3, 8001500 <__sflush_r+0x44>
 80014fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80014fe:	1ad2      	subs	r2, r2, r3
 8001500:	2300      	movs	r3, #0
 8001502:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001504:	6a21      	ldr	r1, [r4, #32]
 8001506:	4628      	mov	r0, r5
 8001508:	47b0      	blx	r6
 800150a:	1c43      	adds	r3, r0, #1
 800150c:	89a3      	ldrh	r3, [r4, #12]
 800150e:	d106      	bne.n	800151e <__sflush_r+0x62>
 8001510:	6829      	ldr	r1, [r5, #0]
 8001512:	291d      	cmp	r1, #29
 8001514:	d82b      	bhi.n	800156e <__sflush_r+0xb2>
 8001516:	4a2a      	ldr	r2, [pc, #168]	@ (80015c0 <__sflush_r+0x104>)
 8001518:	410a      	asrs	r2, r1
 800151a:	07d6      	lsls	r6, r2, #31
 800151c:	d427      	bmi.n	800156e <__sflush_r+0xb2>
 800151e:	2200      	movs	r2, #0
 8001520:	6062      	str	r2, [r4, #4]
 8001522:	04d9      	lsls	r1, r3, #19
 8001524:	6922      	ldr	r2, [r4, #16]
 8001526:	6022      	str	r2, [r4, #0]
 8001528:	d504      	bpl.n	8001534 <__sflush_r+0x78>
 800152a:	1c42      	adds	r2, r0, #1
 800152c:	d101      	bne.n	8001532 <__sflush_r+0x76>
 800152e:	682b      	ldr	r3, [r5, #0]
 8001530:	b903      	cbnz	r3, 8001534 <__sflush_r+0x78>
 8001532:	6560      	str	r0, [r4, #84]	@ 0x54
 8001534:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001536:	602f      	str	r7, [r5, #0]
 8001538:	b1b9      	cbz	r1, 800156a <__sflush_r+0xae>
 800153a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800153e:	4299      	cmp	r1, r3
 8001540:	d002      	beq.n	8001548 <__sflush_r+0x8c>
 8001542:	4628      	mov	r0, r5
 8001544:	f7ff fbf2 	bl	8000d2c <_free_r>
 8001548:	2300      	movs	r3, #0
 800154a:	6363      	str	r3, [r4, #52]	@ 0x34
 800154c:	e00d      	b.n	800156a <__sflush_r+0xae>
 800154e:	2301      	movs	r3, #1
 8001550:	4628      	mov	r0, r5
 8001552:	47b0      	blx	r6
 8001554:	4602      	mov	r2, r0
 8001556:	1c50      	adds	r0, r2, #1
 8001558:	d1c9      	bne.n	80014ee <__sflush_r+0x32>
 800155a:	682b      	ldr	r3, [r5, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d0c6      	beq.n	80014ee <__sflush_r+0x32>
 8001560:	2b1d      	cmp	r3, #29
 8001562:	d001      	beq.n	8001568 <__sflush_r+0xac>
 8001564:	2b16      	cmp	r3, #22
 8001566:	d11e      	bne.n	80015a6 <__sflush_r+0xea>
 8001568:	602f      	str	r7, [r5, #0]
 800156a:	2000      	movs	r0, #0
 800156c:	e022      	b.n	80015b4 <__sflush_r+0xf8>
 800156e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001572:	b21b      	sxth	r3, r3
 8001574:	e01b      	b.n	80015ae <__sflush_r+0xf2>
 8001576:	690f      	ldr	r7, [r1, #16]
 8001578:	2f00      	cmp	r7, #0
 800157a:	d0f6      	beq.n	800156a <__sflush_r+0xae>
 800157c:	0793      	lsls	r3, r2, #30
 800157e:	680e      	ldr	r6, [r1, #0]
 8001580:	bf08      	it	eq
 8001582:	694b      	ldreq	r3, [r1, #20]
 8001584:	600f      	str	r7, [r1, #0]
 8001586:	bf18      	it	ne
 8001588:	2300      	movne	r3, #0
 800158a:	eba6 0807 	sub.w	r8, r6, r7
 800158e:	608b      	str	r3, [r1, #8]
 8001590:	f1b8 0f00 	cmp.w	r8, #0
 8001594:	dde9      	ble.n	800156a <__sflush_r+0xae>
 8001596:	6a21      	ldr	r1, [r4, #32]
 8001598:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800159a:	4643      	mov	r3, r8
 800159c:	463a      	mov	r2, r7
 800159e:	4628      	mov	r0, r5
 80015a0:	47b0      	blx	r6
 80015a2:	2800      	cmp	r0, #0
 80015a4:	dc08      	bgt.n	80015b8 <__sflush_r+0xfc>
 80015a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015ae:	81a3      	strh	r3, [r4, #12]
 80015b0:	f04f 30ff 	mov.w	r0, #4294967295
 80015b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015b8:	4407      	add	r7, r0
 80015ba:	eba8 0800 	sub.w	r8, r8, r0
 80015be:	e7e7      	b.n	8001590 <__sflush_r+0xd4>
 80015c0:	dfbffffe 	.word	0xdfbffffe

080015c4 <_fflush_r>:
 80015c4:	b538      	push	{r3, r4, r5, lr}
 80015c6:	690b      	ldr	r3, [r1, #16]
 80015c8:	4605      	mov	r5, r0
 80015ca:	460c      	mov	r4, r1
 80015cc:	b913      	cbnz	r3, 80015d4 <_fflush_r+0x10>
 80015ce:	2500      	movs	r5, #0
 80015d0:	4628      	mov	r0, r5
 80015d2:	bd38      	pop	{r3, r4, r5, pc}
 80015d4:	b118      	cbz	r0, 80015de <_fflush_r+0x1a>
 80015d6:	6a03      	ldr	r3, [r0, #32]
 80015d8:	b90b      	cbnz	r3, 80015de <_fflush_r+0x1a>
 80015da:	f7ff f9ad 	bl	8000938 <__sinit>
 80015de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d0f3      	beq.n	80015ce <_fflush_r+0xa>
 80015e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80015e8:	07d0      	lsls	r0, r2, #31
 80015ea:	d404      	bmi.n	80015f6 <_fflush_r+0x32>
 80015ec:	0599      	lsls	r1, r3, #22
 80015ee:	d402      	bmi.n	80015f6 <_fflush_r+0x32>
 80015f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80015f2:	f7ff fb98 	bl	8000d26 <__retarget_lock_acquire_recursive>
 80015f6:	4628      	mov	r0, r5
 80015f8:	4621      	mov	r1, r4
 80015fa:	f7ff ff5f 	bl	80014bc <__sflush_r>
 80015fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001600:	07da      	lsls	r2, r3, #31
 8001602:	4605      	mov	r5, r0
 8001604:	d4e4      	bmi.n	80015d0 <_fflush_r+0xc>
 8001606:	89a3      	ldrh	r3, [r4, #12]
 8001608:	059b      	lsls	r3, r3, #22
 800160a:	d4e1      	bmi.n	80015d0 <_fflush_r+0xc>
 800160c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800160e:	f7ff fb8b 	bl	8000d28 <__retarget_lock_release_recursive>
 8001612:	e7dd      	b.n	80015d0 <_fflush_r+0xc>

08001614 <__swhatbuf_r>:
 8001614:	b570      	push	{r4, r5, r6, lr}
 8001616:	460c      	mov	r4, r1
 8001618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800161c:	2900      	cmp	r1, #0
 800161e:	b096      	sub	sp, #88	@ 0x58
 8001620:	4615      	mov	r5, r2
 8001622:	461e      	mov	r6, r3
 8001624:	da0d      	bge.n	8001642 <__swhatbuf_r+0x2e>
 8001626:	89a3      	ldrh	r3, [r4, #12]
 8001628:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800162c:	f04f 0100 	mov.w	r1, #0
 8001630:	bf14      	ite	ne
 8001632:	2340      	movne	r3, #64	@ 0x40
 8001634:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001638:	2000      	movs	r0, #0
 800163a:	6031      	str	r1, [r6, #0]
 800163c:	602b      	str	r3, [r5, #0]
 800163e:	b016      	add	sp, #88	@ 0x58
 8001640:	bd70      	pop	{r4, r5, r6, pc}
 8001642:	466a      	mov	r2, sp
 8001644:	f000 f848 	bl	80016d8 <_fstat_r>
 8001648:	2800      	cmp	r0, #0
 800164a:	dbec      	blt.n	8001626 <__swhatbuf_r+0x12>
 800164c:	9901      	ldr	r1, [sp, #4]
 800164e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001652:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001656:	4259      	negs	r1, r3
 8001658:	4159      	adcs	r1, r3
 800165a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800165e:	e7eb      	b.n	8001638 <__swhatbuf_r+0x24>

08001660 <__smakebuf_r>:
 8001660:	898b      	ldrh	r3, [r1, #12]
 8001662:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001664:	079d      	lsls	r5, r3, #30
 8001666:	4606      	mov	r6, r0
 8001668:	460c      	mov	r4, r1
 800166a:	d507      	bpl.n	800167c <__smakebuf_r+0x1c>
 800166c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001670:	6023      	str	r3, [r4, #0]
 8001672:	6123      	str	r3, [r4, #16]
 8001674:	2301      	movs	r3, #1
 8001676:	6163      	str	r3, [r4, #20]
 8001678:	b003      	add	sp, #12
 800167a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800167c:	ab01      	add	r3, sp, #4
 800167e:	466a      	mov	r2, sp
 8001680:	f7ff ffc8 	bl	8001614 <__swhatbuf_r>
 8001684:	9f00      	ldr	r7, [sp, #0]
 8001686:	4605      	mov	r5, r0
 8001688:	4639      	mov	r1, r7
 800168a:	4630      	mov	r0, r6
 800168c:	f7ff fbba 	bl	8000e04 <_malloc_r>
 8001690:	b948      	cbnz	r0, 80016a6 <__smakebuf_r+0x46>
 8001692:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001696:	059a      	lsls	r2, r3, #22
 8001698:	d4ee      	bmi.n	8001678 <__smakebuf_r+0x18>
 800169a:	f023 0303 	bic.w	r3, r3, #3
 800169e:	f043 0302 	orr.w	r3, r3, #2
 80016a2:	81a3      	strh	r3, [r4, #12]
 80016a4:	e7e2      	b.n	800166c <__smakebuf_r+0xc>
 80016a6:	89a3      	ldrh	r3, [r4, #12]
 80016a8:	6020      	str	r0, [r4, #0]
 80016aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016ae:	81a3      	strh	r3, [r4, #12]
 80016b0:	9b01      	ldr	r3, [sp, #4]
 80016b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80016b6:	b15b      	cbz	r3, 80016d0 <__smakebuf_r+0x70>
 80016b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80016bc:	4630      	mov	r0, r6
 80016be:	f000 f81d 	bl	80016fc <_isatty_r>
 80016c2:	b128      	cbz	r0, 80016d0 <__smakebuf_r+0x70>
 80016c4:	89a3      	ldrh	r3, [r4, #12]
 80016c6:	f023 0303 	bic.w	r3, r3, #3
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	81a3      	strh	r3, [r4, #12]
 80016d0:	89a3      	ldrh	r3, [r4, #12]
 80016d2:	431d      	orrs	r5, r3
 80016d4:	81a5      	strh	r5, [r4, #12]
 80016d6:	e7cf      	b.n	8001678 <__smakebuf_r+0x18>

080016d8 <_fstat_r>:
 80016d8:	b538      	push	{r3, r4, r5, lr}
 80016da:	4d07      	ldr	r5, [pc, #28]	@ (80016f8 <_fstat_r+0x20>)
 80016dc:	2300      	movs	r3, #0
 80016de:	4604      	mov	r4, r0
 80016e0:	4608      	mov	r0, r1
 80016e2:	4611      	mov	r1, r2
 80016e4:	602b      	str	r3, [r5, #0]
 80016e6:	f7ff f812 	bl	800070e <_fstat>
 80016ea:	1c43      	adds	r3, r0, #1
 80016ec:	d102      	bne.n	80016f4 <_fstat_r+0x1c>
 80016ee:	682b      	ldr	r3, [r5, #0]
 80016f0:	b103      	cbz	r3, 80016f4 <_fstat_r+0x1c>
 80016f2:	6023      	str	r3, [r4, #0]
 80016f4:	bd38      	pop	{r3, r4, r5, pc}
 80016f6:	bf00      	nop
 80016f8:	200001b8 	.word	0x200001b8

080016fc <_isatty_r>:
 80016fc:	b538      	push	{r3, r4, r5, lr}
 80016fe:	4d06      	ldr	r5, [pc, #24]	@ (8001718 <_isatty_r+0x1c>)
 8001700:	2300      	movs	r3, #0
 8001702:	4604      	mov	r4, r0
 8001704:	4608      	mov	r0, r1
 8001706:	602b      	str	r3, [r5, #0]
 8001708:	f7ff f811 	bl	800072e <_isatty>
 800170c:	1c43      	adds	r3, r0, #1
 800170e:	d102      	bne.n	8001716 <_isatty_r+0x1a>
 8001710:	682b      	ldr	r3, [r5, #0]
 8001712:	b103      	cbz	r3, 8001716 <_isatty_r+0x1a>
 8001714:	6023      	str	r3, [r4, #0]
 8001716:	bd38      	pop	{r3, r4, r5, pc}
 8001718:	200001b8 	.word	0x200001b8

0800171c <_sbrk_r>:
 800171c:	b538      	push	{r3, r4, r5, lr}
 800171e:	4d06      	ldr	r5, [pc, #24]	@ (8001738 <_sbrk_r+0x1c>)
 8001720:	2300      	movs	r3, #0
 8001722:	4604      	mov	r4, r0
 8001724:	4608      	mov	r0, r1
 8001726:	602b      	str	r3, [r5, #0]
 8001728:	f7ff f81a 	bl	8000760 <_sbrk>
 800172c:	1c43      	adds	r3, r0, #1
 800172e:	d102      	bne.n	8001736 <_sbrk_r+0x1a>
 8001730:	682b      	ldr	r3, [r5, #0]
 8001732:	b103      	cbz	r3, 8001736 <_sbrk_r+0x1a>
 8001734:	6023      	str	r3, [r4, #0]
 8001736:	bd38      	pop	{r3, r4, r5, pc}
 8001738:	200001b8 	.word	0x200001b8

0800173c <_init>:
 800173c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800173e:	bf00      	nop
 8001740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001742:	bc08      	pop	{r3}
 8001744:	469e      	mov	lr, r3
 8001746:	4770      	bx	lr

08001748 <_fini>:
 8001748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800174a:	bf00      	nop
 800174c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800174e:	bc08      	pop	{r3}
 8001750:	469e      	mov	lr, r3
 8001752:	4770      	bx	lr
