
stm32f407_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000740  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080008c8  080008d0  000018d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080008c8  080008c8  000018d0  2**0
                  CONTENTS
  4 .ARM          00000000  080008c8  080008c8  000018d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080008c8  080008d0  000018d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080008c8  080008c8  000018c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080008cc  080008cc  000018cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000018d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000018d0  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000018d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000a07  00000000  00000000  00001900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002bc  00000000  00000000  00002307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c0  00000000  00000000  000025c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000085  00000000  00000000  00002688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000020d8  00000000  00000000  0000270d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001097  00000000  00000000  000047e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000927b  00000000  00000000  0000587c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000eaf7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000248  00000000  00000000  0000eb3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  0000ed84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080008b0 	.word	0x080008b0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080008b0 	.word	0x080008b0

080001c8 <GPIO_CLK>:
 *@return					: None
 *
 *@note						: None
 *
 */
void GPIO_CLK(GPIO_RegDef_t *pGPIO, uint8_t EnorDis){
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	460b      	mov	r3, r1
 80001d2:	70fb      	strb	r3, [r7, #3]
	if(EnorDis){ // if enable clk
 80001d4:	78fb      	ldrb	r3, [r7, #3]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d062      	beq.n	80002a0 <GPIO_CLK+0xd8>
		if(pGPIO == GPIOA) 			// pointer point to the base address of GPIO (look at stm32f407xx.h for more info) 205-215
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	4a64      	ldr	r2, [pc, #400]	@ (8000370 <GPIO_CLK+0x1a8>)
 80001de:	4293      	cmp	r3, r2
 80001e0:	d106      	bne.n	80001f0 <GPIO_CLK+0x28>
			GPIOA_CLK_EN();			// Macros stm32f407xx.h 228 to 238
 80001e2:	4b64      	ldr	r3, [pc, #400]	@ (8000374 <GPIO_CLK+0x1ac>)
 80001e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001e6:	4a63      	ldr	r2, [pc, #396]	@ (8000374 <GPIO_CLK+0x1ac>)
 80001e8:	f043 0301 	orr.w	r3, r3, #1
 80001ec:	6313      	str	r3, [r2, #48]	@ 0x30
		else if(pGPIO == GPIOH)
			GPIOH_CLK_DIS();
		else if(pGPIO == GPIOI)
			GPIOI_CLK_DIS();
	}
}
 80001ee:	e0b9      	b.n	8000364 <GPIO_CLK+0x19c>
		else if(pGPIO == GPIOB)
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	4a61      	ldr	r2, [pc, #388]	@ (8000378 <GPIO_CLK+0x1b0>)
 80001f4:	4293      	cmp	r3, r2
 80001f6:	d106      	bne.n	8000206 <GPIO_CLK+0x3e>
			GPIOB_CLK_EN();
 80001f8:	4b5e      	ldr	r3, [pc, #376]	@ (8000374 <GPIO_CLK+0x1ac>)
 80001fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001fc:	4a5d      	ldr	r2, [pc, #372]	@ (8000374 <GPIO_CLK+0x1ac>)
 80001fe:	f043 0302 	orr.w	r3, r3, #2
 8000202:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000204:	e0ae      	b.n	8000364 <GPIO_CLK+0x19c>
		else if(pGPIO == GPIOC)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	4a5c      	ldr	r2, [pc, #368]	@ (800037c <GPIO_CLK+0x1b4>)
 800020a:	4293      	cmp	r3, r2
 800020c:	d106      	bne.n	800021c <GPIO_CLK+0x54>
			GPIOC_CLK_EN();
 800020e:	4b59      	ldr	r3, [pc, #356]	@ (8000374 <GPIO_CLK+0x1ac>)
 8000210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000212:	4a58      	ldr	r2, [pc, #352]	@ (8000374 <GPIO_CLK+0x1ac>)
 8000214:	f043 0304 	orr.w	r3, r3, #4
 8000218:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800021a:	e0a3      	b.n	8000364 <GPIO_CLK+0x19c>
		else if(pGPIO == GPIOD)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	4a58      	ldr	r2, [pc, #352]	@ (8000380 <GPIO_CLK+0x1b8>)
 8000220:	4293      	cmp	r3, r2
 8000222:	d106      	bne.n	8000232 <GPIO_CLK+0x6a>
			GPIOD_CLK_EN();
 8000224:	4b53      	ldr	r3, [pc, #332]	@ (8000374 <GPIO_CLK+0x1ac>)
 8000226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000228:	4a52      	ldr	r2, [pc, #328]	@ (8000374 <GPIO_CLK+0x1ac>)
 800022a:	f043 0308 	orr.w	r3, r3, #8
 800022e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000230:	e098      	b.n	8000364 <GPIO_CLK+0x19c>
		else if(pGPIO == GPIOE)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	4a53      	ldr	r2, [pc, #332]	@ (8000384 <GPIO_CLK+0x1bc>)
 8000236:	4293      	cmp	r3, r2
 8000238:	d106      	bne.n	8000248 <GPIO_CLK+0x80>
			GPIOE_CLK_EN();
 800023a:	4b4e      	ldr	r3, [pc, #312]	@ (8000374 <GPIO_CLK+0x1ac>)
 800023c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800023e:	4a4d      	ldr	r2, [pc, #308]	@ (8000374 <GPIO_CLK+0x1ac>)
 8000240:	f043 0310 	orr.w	r3, r3, #16
 8000244:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000246:	e08d      	b.n	8000364 <GPIO_CLK+0x19c>
		else if(pGPIO == GPIOF)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	4a4f      	ldr	r2, [pc, #316]	@ (8000388 <GPIO_CLK+0x1c0>)
 800024c:	4293      	cmp	r3, r2
 800024e:	d106      	bne.n	800025e <GPIO_CLK+0x96>
			GPIOF_CLK_EN();
 8000250:	4b48      	ldr	r3, [pc, #288]	@ (8000374 <GPIO_CLK+0x1ac>)
 8000252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000254:	4a47      	ldr	r2, [pc, #284]	@ (8000374 <GPIO_CLK+0x1ac>)
 8000256:	f043 0320 	orr.w	r3, r3, #32
 800025a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800025c:	e082      	b.n	8000364 <GPIO_CLK+0x19c>
		else if(pGPIO == GPIOG)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	4a4a      	ldr	r2, [pc, #296]	@ (800038c <GPIO_CLK+0x1c4>)
 8000262:	4293      	cmp	r3, r2
 8000264:	d106      	bne.n	8000274 <GPIO_CLK+0xac>
			GPIOG_CLK_EN();
 8000266:	4b43      	ldr	r3, [pc, #268]	@ (8000374 <GPIO_CLK+0x1ac>)
 8000268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800026a:	4a42      	ldr	r2, [pc, #264]	@ (8000374 <GPIO_CLK+0x1ac>)
 800026c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000270:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000272:	e077      	b.n	8000364 <GPIO_CLK+0x19c>
		else if(pGPIO == GPIOH)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	4a46      	ldr	r2, [pc, #280]	@ (8000390 <GPIO_CLK+0x1c8>)
 8000278:	4293      	cmp	r3, r2
 800027a:	d106      	bne.n	800028a <GPIO_CLK+0xc2>
			GPIOH_CLK_EN();
 800027c:	4b3d      	ldr	r3, [pc, #244]	@ (8000374 <GPIO_CLK+0x1ac>)
 800027e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000280:	4a3c      	ldr	r2, [pc, #240]	@ (8000374 <GPIO_CLK+0x1ac>)
 8000282:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000286:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000288:	e06c      	b.n	8000364 <GPIO_CLK+0x19c>
		else if(pGPIO == GPIOI)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	4a41      	ldr	r2, [pc, #260]	@ (8000394 <GPIO_CLK+0x1cc>)
 800028e:	4293      	cmp	r3, r2
 8000290:	d168      	bne.n	8000364 <GPIO_CLK+0x19c>
			GPIOI_CLK_EN();
 8000292:	4b38      	ldr	r3, [pc, #224]	@ (8000374 <GPIO_CLK+0x1ac>)
 8000294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000296:	4a37      	ldr	r2, [pc, #220]	@ (8000374 <GPIO_CLK+0x1ac>)
 8000298:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800029c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800029e:	e061      	b.n	8000364 <GPIO_CLK+0x19c>
		if(pGPIO == GPIOA) 			// pointer point to the base address of GPIO (look at stm32f407xx.h for more info) 205-215
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	4a33      	ldr	r2, [pc, #204]	@ (8000370 <GPIO_CLK+0x1a8>)
 80002a4:	4293      	cmp	r3, r2
 80002a6:	d106      	bne.n	80002b6 <GPIO_CLK+0xee>
			GPIOA_CLK_DIS();			// Macros stm32f407xx.h 277 to 287
 80002a8:	4b32      	ldr	r3, [pc, #200]	@ (8000374 <GPIO_CLK+0x1ac>)
 80002aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ac:	4a31      	ldr	r2, [pc, #196]	@ (8000374 <GPIO_CLK+0x1ac>)
 80002ae:	f023 0301 	bic.w	r3, r3, #1
 80002b2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002b4:	e056      	b.n	8000364 <GPIO_CLK+0x19c>
		else if(pGPIO == GPIOB)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	4a2f      	ldr	r2, [pc, #188]	@ (8000378 <GPIO_CLK+0x1b0>)
 80002ba:	4293      	cmp	r3, r2
 80002bc:	d106      	bne.n	80002cc <GPIO_CLK+0x104>
			GPIOB_CLK_DIS();
 80002be:	4b2d      	ldr	r3, [pc, #180]	@ (8000374 <GPIO_CLK+0x1ac>)
 80002c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002c2:	4a2c      	ldr	r2, [pc, #176]	@ (8000374 <GPIO_CLK+0x1ac>)
 80002c4:	f023 0302 	bic.w	r3, r3, #2
 80002c8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002ca:	e04b      	b.n	8000364 <GPIO_CLK+0x19c>
		else if(pGPIO == GPIOC)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	4a2b      	ldr	r2, [pc, #172]	@ (800037c <GPIO_CLK+0x1b4>)
 80002d0:	4293      	cmp	r3, r2
 80002d2:	d106      	bne.n	80002e2 <GPIO_CLK+0x11a>
			GPIOC_CLK_DIS();
 80002d4:	4b27      	ldr	r3, [pc, #156]	@ (8000374 <GPIO_CLK+0x1ac>)
 80002d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002d8:	4a26      	ldr	r2, [pc, #152]	@ (8000374 <GPIO_CLK+0x1ac>)
 80002da:	f023 0304 	bic.w	r3, r3, #4
 80002de:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002e0:	e040      	b.n	8000364 <GPIO_CLK+0x19c>
		else if(pGPIO == GPIOD)
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	4a26      	ldr	r2, [pc, #152]	@ (8000380 <GPIO_CLK+0x1b8>)
 80002e6:	4293      	cmp	r3, r2
 80002e8:	d106      	bne.n	80002f8 <GPIO_CLK+0x130>
			GPIOD_CLK_DIS();
 80002ea:	4b22      	ldr	r3, [pc, #136]	@ (8000374 <GPIO_CLK+0x1ac>)
 80002ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ee:	4a21      	ldr	r2, [pc, #132]	@ (8000374 <GPIO_CLK+0x1ac>)
 80002f0:	f023 0308 	bic.w	r3, r3, #8
 80002f4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002f6:	e035      	b.n	8000364 <GPIO_CLK+0x19c>
		else if(pGPIO == GPIOE)
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	4a22      	ldr	r2, [pc, #136]	@ (8000384 <GPIO_CLK+0x1bc>)
 80002fc:	4293      	cmp	r3, r2
 80002fe:	d106      	bne.n	800030e <GPIO_CLK+0x146>
			GPIOE_CLK_DIS();
 8000300:	4b1c      	ldr	r3, [pc, #112]	@ (8000374 <GPIO_CLK+0x1ac>)
 8000302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000304:	4a1b      	ldr	r2, [pc, #108]	@ (8000374 <GPIO_CLK+0x1ac>)
 8000306:	f023 0310 	bic.w	r3, r3, #16
 800030a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800030c:	e02a      	b.n	8000364 <GPIO_CLK+0x19c>
		else if(pGPIO == GPIOF)
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	4a1d      	ldr	r2, [pc, #116]	@ (8000388 <GPIO_CLK+0x1c0>)
 8000312:	4293      	cmp	r3, r2
 8000314:	d106      	bne.n	8000324 <GPIO_CLK+0x15c>
			GPIOF_CLK_DIS();
 8000316:	4b17      	ldr	r3, [pc, #92]	@ (8000374 <GPIO_CLK+0x1ac>)
 8000318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800031a:	4a16      	ldr	r2, [pc, #88]	@ (8000374 <GPIO_CLK+0x1ac>)
 800031c:	f023 0320 	bic.w	r3, r3, #32
 8000320:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000322:	e01f      	b.n	8000364 <GPIO_CLK+0x19c>
		else if(pGPIO == GPIOG)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	4a19      	ldr	r2, [pc, #100]	@ (800038c <GPIO_CLK+0x1c4>)
 8000328:	4293      	cmp	r3, r2
 800032a:	d106      	bne.n	800033a <GPIO_CLK+0x172>
			GPIOG_CLK_DIS();
 800032c:	4b11      	ldr	r3, [pc, #68]	@ (8000374 <GPIO_CLK+0x1ac>)
 800032e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000330:	4a10      	ldr	r2, [pc, #64]	@ (8000374 <GPIO_CLK+0x1ac>)
 8000332:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000336:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000338:	e014      	b.n	8000364 <GPIO_CLK+0x19c>
		else if(pGPIO == GPIOH)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	4a14      	ldr	r2, [pc, #80]	@ (8000390 <GPIO_CLK+0x1c8>)
 800033e:	4293      	cmp	r3, r2
 8000340:	d106      	bne.n	8000350 <GPIO_CLK+0x188>
			GPIOH_CLK_DIS();
 8000342:	4b0c      	ldr	r3, [pc, #48]	@ (8000374 <GPIO_CLK+0x1ac>)
 8000344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000346:	4a0b      	ldr	r2, [pc, #44]	@ (8000374 <GPIO_CLK+0x1ac>)
 8000348:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800034c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800034e:	e009      	b.n	8000364 <GPIO_CLK+0x19c>
		else if(pGPIO == GPIOI)
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	4a10      	ldr	r2, [pc, #64]	@ (8000394 <GPIO_CLK+0x1cc>)
 8000354:	4293      	cmp	r3, r2
 8000356:	d105      	bne.n	8000364 <GPIO_CLK+0x19c>
			GPIOI_CLK_DIS();
 8000358:	4b06      	ldr	r3, [pc, #24]	@ (8000374 <GPIO_CLK+0x1ac>)
 800035a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800035c:	4a05      	ldr	r2, [pc, #20]	@ (8000374 <GPIO_CLK+0x1ac>)
 800035e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000362:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000364:	bf00      	nop
 8000366:	370c      	adds	r7, #12
 8000368:	46bd      	mov	sp, r7
 800036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036e:	4770      	bx	lr
 8000370:	40020000 	.word	0x40020000
 8000374:	40023800 	.word	0x40023800
 8000378:	40020400 	.word	0x40020400
 800037c:	40020800 	.word	0x40020800
 8000380:	40020c00 	.word	0x40020c00
 8000384:	40021000 	.word	0x40021000
 8000388:	40021400 	.word	0x40021400
 800038c:	40021800 	.word	0x40021800
 8000390:	40021c00 	.word	0x40021c00
 8000394:	40022000 	.word	0x40022000

08000398 <GPIO_Init>:
 *@return					: None
 *
 *@note						: In this Func we need to config the given PORT and the given pin, mode, speed, output type, pull up-down resistor, alternate func
 *
 */
void GPIO_Init(GPIO_HAL *pGPIO_Handle){
 8000398:	b580      	push	{r7, lr}
 800039a:	b086      	sub	sp, #24
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]

	GPIO_CLK(pGPIO_Handle->pGPIOx, ENABLE);
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	2101      	movs	r1, #1
 80003a6:	4618      	mov	r0, r3
 80003a8:	f7ff ff0e 	bl	80001c8 <GPIO_CLK>
	/*Nguoi dung da khai bao tat ca cac gia tri can thiet, bay h chi huong con tro
	 * den vi tri thanh ghi dung voi nguoi dung nhap
	*/
	//-----------------------------------------------------------------------------------------------
	//1. Mode
	uint32_t tmp = 0;
 80003ac:	2300      	movs	r3, #0
 80003ae:	617b      	str	r3, [r7, #20]
	// Check if mode interrupt or not (IRQ have value > GPIO_MODE_ANALOG (3))
	if(pGPIO_Handle->GPIO_PIN_CONFIG.GPIO_Pin_mode <= GPIO_MODE_ANALOG){
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	795b      	ldrb	r3, [r3, #5]
 80003b4:	2b03      	cmp	r3, #3
 80003b6:	d820      	bhi.n	80003fa <GPIO_Init+0x62>
		// not an interrupt
		// Shift value of mode to the right register
		tmp = (pGPIO_Handle->GPIO_PIN_CONFIG.GPIO_Pin_mode << (2 * pGPIO_Handle->GPIO_PIN_CONFIG.GPIO_Pin_num));
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	795b      	ldrb	r3, [r3, #5]
 80003bc:	461a      	mov	r2, r3
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	791b      	ldrb	r3, [r3, #4]
 80003c2:	005b      	lsls	r3, r3, #1
 80003c4:	fa02 f303 	lsl.w	r3, r2, r3
 80003c8:	617b      	str	r3, [r7, #20]
		pGPIO_Handle->pGPIOx->MODER &= ~(0x03 << (2 * pGPIO_Handle->GPIO_PIN_CONFIG.GPIO_Pin_num)); // clear bit at that position
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	681a      	ldr	r2, [r3, #0]
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	791b      	ldrb	r3, [r3, #4]
 80003d4:	005b      	lsls	r3, r3, #1
 80003d6:	2103      	movs	r1, #3
 80003d8:	fa01 f303 	lsl.w	r3, r1, r3
 80003dc:	43db      	mvns	r3, r3
 80003de:	4619      	mov	r1, r3
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	400a      	ands	r2, r1
 80003e6:	601a      	str	r2, [r3, #0]
		pGPIO_Handle->pGPIOx->MODER |= tmp; //only change the bit that is being config, not check other bit
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	6819      	ldr	r1, [r3, #0]
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	697a      	ldr	r2, [r7, #20]
 80003f4:	430a      	orrs	r2, r1
 80003f6:	601a      	str	r2, [r3, #0]
 80003f8:	e0c8      	b.n	800058c <GPIO_Init+0x1f4>
	}else{
		// 1. CHECK WHAT KIND OF INTERRUPT IS THIS
		if(pGPIO_Handle->GPIO_PIN_CONFIG.GPIO_Pin_mode == GPIO_MODE_IN_FE){
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	795b      	ldrb	r3, [r3, #5]
 80003fe:	2b04      	cmp	r3, #4
 8000400:	d117      	bne.n	8000432 <GPIO_Init+0x9a>
			// config falling trigger selection register (FISR)
			EXTI->EXTI_FTSR |= (1 << pGPIO_Handle->GPIO_PIN_CONFIG.GPIO_Pin_num); 	// ENABLE FISR ON SELECTED PIN
 8000402:	4b49      	ldr	r3, [pc, #292]	@ (8000528 <GPIO_Init+0x190>)
 8000404:	68db      	ldr	r3, [r3, #12]
 8000406:	687a      	ldr	r2, [r7, #4]
 8000408:	7912      	ldrb	r2, [r2, #4]
 800040a:	4611      	mov	r1, r2
 800040c:	2201      	movs	r2, #1
 800040e:	408a      	lsls	r2, r1
 8000410:	4611      	mov	r1, r2
 8000412:	4a45      	ldr	r2, [pc, #276]	@ (8000528 <GPIO_Init+0x190>)
 8000414:	430b      	orrs	r3, r1
 8000416:	60d3      	str	r3, [r2, #12]
			EXTI->EXTI_RTSR &= ~(1 << pGPIO_Handle->GPIO_PIN_CONFIG.GPIO_Pin_num); 	// DISABLE RISR ON SELECTED PIN
 8000418:	4b43      	ldr	r3, [pc, #268]	@ (8000528 <GPIO_Init+0x190>)
 800041a:	689b      	ldr	r3, [r3, #8]
 800041c:	687a      	ldr	r2, [r7, #4]
 800041e:	7912      	ldrb	r2, [r2, #4]
 8000420:	4611      	mov	r1, r2
 8000422:	2201      	movs	r2, #1
 8000424:	408a      	lsls	r2, r1
 8000426:	43d2      	mvns	r2, r2
 8000428:	4611      	mov	r1, r2
 800042a:	4a3f      	ldr	r2, [pc, #252]	@ (8000528 <GPIO_Init+0x190>)
 800042c:	400b      	ands	r3, r1
 800042e:	6093      	str	r3, [r2, #8]
 8000430:	e031      	b.n	8000496 <GPIO_Init+0xfe>
		}
		else if(pGPIO_Handle->GPIO_PIN_CONFIG.GPIO_Pin_mode == GPIO_MODE_IN_RE){
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	795b      	ldrb	r3, [r3, #5]
 8000436:	2b05      	cmp	r3, #5
 8000438:	d117      	bne.n	800046a <GPIO_Init+0xd2>
			// config rising trigger selection register (RISR)
			EXTI->EXTI_RTSR |= (1 << pGPIO_Handle->GPIO_PIN_CONFIG.GPIO_Pin_num); 	// ENABLE RISR ON SELECTED PIN
 800043a:	4b3b      	ldr	r3, [pc, #236]	@ (8000528 <GPIO_Init+0x190>)
 800043c:	689b      	ldr	r3, [r3, #8]
 800043e:	687a      	ldr	r2, [r7, #4]
 8000440:	7912      	ldrb	r2, [r2, #4]
 8000442:	4611      	mov	r1, r2
 8000444:	2201      	movs	r2, #1
 8000446:	408a      	lsls	r2, r1
 8000448:	4611      	mov	r1, r2
 800044a:	4a37      	ldr	r2, [pc, #220]	@ (8000528 <GPIO_Init+0x190>)
 800044c:	430b      	orrs	r3, r1
 800044e:	6093      	str	r3, [r2, #8]
			EXTI->EXTI_FTSR &= ~(1 << pGPIO_Handle->GPIO_PIN_CONFIG.GPIO_Pin_num); 	// DISABLE FISR ON SELECTED PIN
 8000450:	4b35      	ldr	r3, [pc, #212]	@ (8000528 <GPIO_Init+0x190>)
 8000452:	68db      	ldr	r3, [r3, #12]
 8000454:	687a      	ldr	r2, [r7, #4]
 8000456:	7912      	ldrb	r2, [r2, #4]
 8000458:	4611      	mov	r1, r2
 800045a:	2201      	movs	r2, #1
 800045c:	408a      	lsls	r2, r1
 800045e:	43d2      	mvns	r2, r2
 8000460:	4611      	mov	r1, r2
 8000462:	4a31      	ldr	r2, [pc, #196]	@ (8000528 <GPIO_Init+0x190>)
 8000464:	400b      	ands	r3, r1
 8000466:	60d3      	str	r3, [r2, #12]
 8000468:	e015      	b.n	8000496 <GPIO_Init+0xfe>
		}
		else{
		// 1. config falling, rising trigger selection register (FISR and RTSR)
			EXTI->EXTI_FTSR |= (1 << pGPIO_Handle->GPIO_PIN_CONFIG.GPIO_Pin_num); 	// ENABLE FISR ON SELECTED PIN
 800046a:	4b2f      	ldr	r3, [pc, #188]	@ (8000528 <GPIO_Init+0x190>)
 800046c:	68db      	ldr	r3, [r3, #12]
 800046e:	687a      	ldr	r2, [r7, #4]
 8000470:	7912      	ldrb	r2, [r2, #4]
 8000472:	4611      	mov	r1, r2
 8000474:	2201      	movs	r2, #1
 8000476:	408a      	lsls	r2, r1
 8000478:	4611      	mov	r1, r2
 800047a:	4a2b      	ldr	r2, [pc, #172]	@ (8000528 <GPIO_Init+0x190>)
 800047c:	430b      	orrs	r3, r1
 800047e:	60d3      	str	r3, [r2, #12]
			EXTI->EXTI_RTSR |= (1 << pGPIO_Handle->GPIO_PIN_CONFIG.GPIO_Pin_num); 	// ENABLE RISR ON SELECTED PIN
 8000480:	4b29      	ldr	r3, [pc, #164]	@ (8000528 <GPIO_Init+0x190>)
 8000482:	689b      	ldr	r3, [r3, #8]
 8000484:	687a      	ldr	r2, [r7, #4]
 8000486:	7912      	ldrb	r2, [r2, #4]
 8000488:	4611      	mov	r1, r2
 800048a:	2201      	movs	r2, #1
 800048c:	408a      	lsls	r2, r1
 800048e:	4611      	mov	r1, r2
 8000490:	4a25      	ldr	r2, [pc, #148]	@ (8000528 <GPIO_Init+0x190>)
 8000492:	430b      	orrs	r3, r1
 8000494:	6093      	str	r3, [r2, #8]
		}

		// 2. congif GPIO port selection is SYSCFG_EXTICR
			uint8_t tmp1 = pGPIO_Handle->GPIO_PIN_CONFIG.GPIO_Pin_num / 4; // determine what EXTICR[] 1 2 3 4 to use base on the pin
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	791b      	ldrb	r3, [r3, #4]
 800049a:	089b      	lsrs	r3, r3, #2
 800049c:	74fb      	strb	r3, [r7, #19]
			uint8_t tmp2 = pGPIO_Handle->GPIO_PIN_CONFIG.GPIO_Pin_num % 4; // var to shift it to the correct PORT
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	791b      	ldrb	r3, [r3, #4]
 80004a2:	f003 0303 	and.w	r3, r3, #3
 80004a6:	74bb      	strb	r3, [r7, #18]
			uint8_t port_code = GPIO_ADDR_TO_CODE(pGPIO_Handle->pGPIOx);
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4a1f      	ldr	r2, [pc, #124]	@ (800052c <GPIO_Init+0x194>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d04e      	beq.n	8000550 <GPIO_Init+0x1b8>
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	4a1e      	ldr	r2, [pc, #120]	@ (8000530 <GPIO_Init+0x198>)
 80004b8:	4293      	cmp	r3, r2
 80004ba:	d032      	beq.n	8000522 <GPIO_Init+0x18a>
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a1c      	ldr	r2, [pc, #112]	@ (8000534 <GPIO_Init+0x19c>)
 80004c2:	4293      	cmp	r3, r2
 80004c4:	d02b      	beq.n	800051e <GPIO_Init+0x186>
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4a1b      	ldr	r2, [pc, #108]	@ (8000538 <GPIO_Init+0x1a0>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d024      	beq.n	800051a <GPIO_Init+0x182>
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a19      	ldr	r2, [pc, #100]	@ (800053c <GPIO_Init+0x1a4>)
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d01d      	beq.n	8000516 <GPIO_Init+0x17e>
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a18      	ldr	r2, [pc, #96]	@ (8000540 <GPIO_Init+0x1a8>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d016      	beq.n	8000512 <GPIO_Init+0x17a>
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a16      	ldr	r2, [pc, #88]	@ (8000544 <GPIO_Init+0x1ac>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d00f      	beq.n	800050e <GPIO_Init+0x176>
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a15      	ldr	r2, [pc, #84]	@ (8000548 <GPIO_Init+0x1b0>)
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d008      	beq.n	800050a <GPIO_Init+0x172>
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a13      	ldr	r2, [pc, #76]	@ (800054c <GPIO_Init+0x1b4>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d101      	bne.n	8000506 <GPIO_Init+0x16e>
 8000502:	2308      	movs	r3, #8
 8000504:	e025      	b.n	8000552 <GPIO_Init+0x1ba>
 8000506:	2300      	movs	r3, #0
 8000508:	e023      	b.n	8000552 <GPIO_Init+0x1ba>
 800050a:	2307      	movs	r3, #7
 800050c:	e021      	b.n	8000552 <GPIO_Init+0x1ba>
 800050e:	2306      	movs	r3, #6
 8000510:	e01f      	b.n	8000552 <GPIO_Init+0x1ba>
 8000512:	2305      	movs	r3, #5
 8000514:	e01d      	b.n	8000552 <GPIO_Init+0x1ba>
 8000516:	2304      	movs	r3, #4
 8000518:	e01b      	b.n	8000552 <GPIO_Init+0x1ba>
 800051a:	2303      	movs	r3, #3
 800051c:	e019      	b.n	8000552 <GPIO_Init+0x1ba>
 800051e:	2302      	movs	r3, #2
 8000520:	e017      	b.n	8000552 <GPIO_Init+0x1ba>
 8000522:	2301      	movs	r3, #1
 8000524:	e015      	b.n	8000552 <GPIO_Init+0x1ba>
 8000526:	bf00      	nop
 8000528:	40013c00 	.word	0x40013c00
 800052c:	40020000 	.word	0x40020000
 8000530:	40020400 	.word	0x40020400
 8000534:	40020800 	.word	0x40020800
 8000538:	40020c00 	.word	0x40020c00
 800053c:	40021000 	.word	0x40021000
 8000540:	40021400 	.word	0x40021400
 8000544:	40021800 	.word	0x40021800
 8000548:	40021c00 	.word	0x40021c00
 800054c:	40022000 	.word	0x40022000
 8000550:	2300      	movs	r3, #0
 8000552:	747b      	strb	r3, [r7, #17]
			SYSCFG->SYSCFG_EXTICR[tmp1] |= (port_code << (4 * tmp2));
 8000554:	4a5d      	ldr	r2, [pc, #372]	@ (80006cc <GPIO_Init+0x334>)
 8000556:	7cfb      	ldrb	r3, [r7, #19]
 8000558:	3302      	adds	r3, #2
 800055a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800055e:	7c79      	ldrb	r1, [r7, #17]
 8000560:	7cbb      	ldrb	r3, [r7, #18]
 8000562:	009b      	lsls	r3, r3, #2
 8000564:	fa01 f303 	lsl.w	r3, r1, r3
 8000568:	4618      	mov	r0, r3
 800056a:	4958      	ldr	r1, [pc, #352]	@ (80006cc <GPIO_Init+0x334>)
 800056c:	7cfb      	ldrb	r3, [r7, #19]
 800056e:	4302      	orrs	r2, r0
 8000570:	3302      	adds	r3, #2
 8000572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// 3. enable EXTI interrupt delivery in IMR (interrupt mask register)
			EXTI->EXTI_IMR |= (1 << pGPIO_Handle->GPIO_PIN_CONFIG.GPIO_Pin_num);
 8000576:	4b56      	ldr	r3, [pc, #344]	@ (80006d0 <GPIO_Init+0x338>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	687a      	ldr	r2, [r7, #4]
 800057c:	7912      	ldrb	r2, [r2, #4]
 800057e:	4611      	mov	r1, r2
 8000580:	2201      	movs	r2, #1
 8000582:	408a      	lsls	r2, r1
 8000584:	4611      	mov	r1, r2
 8000586:	4a52      	ldr	r2, [pc, #328]	@ (80006d0 <GPIO_Init+0x338>)
 8000588:	430b      	orrs	r3, r1
 800058a:	6013      	str	r3, [r2, #0]
	}




	tmp = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	617b      	str	r3, [r7, #20]
	//-----------------------------------------------------------------------------------------------
	// 2. Speed
	tmp = pGPIO_Handle->GPIO_PIN_CONFIG.GPIO_Pin_speed << (2 * pGPIO_Handle->GPIO_PIN_CONFIG.GPIO_Pin_num);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	799b      	ldrb	r3, [r3, #6]
 8000594:	461a      	mov	r2, r3
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	791b      	ldrb	r3, [r3, #4]
 800059a:	005b      	lsls	r3, r3, #1
 800059c:	fa02 f303 	lsl.w	r3, r2, r3
 80005a0:	617b      	str	r3, [r7, #20]
	pGPIO_Handle->pGPIOx->OSPEEDR &= ~(0x03 << (2 * pGPIO_Handle->GPIO_PIN_CONFIG.GPIO_Pin_num));
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	689a      	ldr	r2, [r3, #8]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	791b      	ldrb	r3, [r3, #4]
 80005ac:	005b      	lsls	r3, r3, #1
 80005ae:	2103      	movs	r1, #3
 80005b0:	fa01 f303 	lsl.w	r3, r1, r3
 80005b4:	43db      	mvns	r3, r3
 80005b6:	4619      	mov	r1, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	400a      	ands	r2, r1
 80005be:	609a      	str	r2, [r3, #8]
	pGPIO_Handle->pGPIOx->OSPEEDR |= tmp;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	6899      	ldr	r1, [r3, #8]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	697a      	ldr	r2, [r7, #20]
 80005cc:	430a      	orrs	r2, r1
 80005ce:	609a      	str	r2, [r3, #8]
	tmp = 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]
	//-----------------------------------------------------------------------------------------------
	// 3. pull up pull down
	tmp = pGPIO_Handle->GPIO_PIN_CONFIG.GPIO_Pin_PuPdCONTROL << (2 * pGPIO_Handle->GPIO_PIN_CONFIG.GPIO_Pin_num);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	79db      	ldrb	r3, [r3, #7]
 80005d8:	461a      	mov	r2, r3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	791b      	ldrb	r3, [r3, #4]
 80005de:	005b      	lsls	r3, r3, #1
 80005e0:	fa02 f303 	lsl.w	r3, r2, r3
 80005e4:	617b      	str	r3, [r7, #20]
	pGPIO_Handle->pGPIOx->PUPDR &= ~(0x03 << (2 * pGPIO_Handle->GPIO_PIN_CONFIG.GPIO_Pin_num));
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	68da      	ldr	r2, [r3, #12]
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	791b      	ldrb	r3, [r3, #4]
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	2103      	movs	r1, #3
 80005f4:	fa01 f303 	lsl.w	r3, r1, r3
 80005f8:	43db      	mvns	r3, r3
 80005fa:	4619      	mov	r1, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	400a      	ands	r2, r1
 8000602:	60da      	str	r2, [r3, #12]
	pGPIO_Handle->pGPIOx->PUPDR |= tmp;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	68d9      	ldr	r1, [r3, #12]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	697a      	ldr	r2, [r7, #20]
 8000610:	430a      	orrs	r2, r1
 8000612:	60da      	str	r2, [r3, #12]
	tmp = 0;
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]
	//-----------------------------------------------------------------------------------------------
	// 4. out put type
	tmp = pGPIO_Handle->GPIO_PIN_CONFIG.GPIO_Pin_OUTPUT_TYPE << pGPIO_Handle->GPIO_PIN_CONFIG.GPIO_Pin_num;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	7a1b      	ldrb	r3, [r3, #8]
 800061c:	461a      	mov	r2, r3
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	791b      	ldrb	r3, [r3, #4]
 8000622:	fa02 f303 	lsl.w	r3, r2, r3
 8000626:	617b      	str	r3, [r7, #20]
	pGPIO_Handle->pGPIOx->OTYPER &= ~(0x01 << pGPIO_Handle->GPIO_PIN_CONFIG.GPIO_Pin_num);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	685a      	ldr	r2, [r3, #4]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	791b      	ldrb	r3, [r3, #4]
 8000632:	4619      	mov	r1, r3
 8000634:	2301      	movs	r3, #1
 8000636:	408b      	lsls	r3, r1
 8000638:	43db      	mvns	r3, r3
 800063a:	4619      	mov	r1, r3
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	400a      	ands	r2, r1
 8000642:	605a      	str	r2, [r3, #4]
	pGPIO_Handle->pGPIOx->OTYPER |= tmp;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	6859      	ldr	r1, [r3, #4]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	697a      	ldr	r2, [r7, #20]
 8000650:	430a      	orrs	r2, r1
 8000652:	605a      	str	r2, [r3, #4]
	tmp = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]
	//-----------------------------------------------------------------------------------------------
	// 5. Alternate Function
	if(pGPIO_Handle->GPIO_PIN_CONFIG.GPIO_Pin_mode == GPIO_MODE_ALT){
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	795b      	ldrb	r3, [r3, #5]
 800065c:	2b02      	cmp	r3, #2
 800065e:	d131      	bne.n	80006c4 <GPIO_Init+0x32c>
		// configure the alternate function registers
		uint8_t temp1 , temp2 ;

		temp1 = pGPIO_Handle->GPIO_PIN_CONFIG.GPIO_Pin_num/ 8 ;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	791b      	ldrb	r3, [r3, #4]
 8000664:	08db      	lsrs	r3, r3, #3
 8000666:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIO_Handle->GPIO_PIN_CONFIG.GPIO_Pin_num % 8 ;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	791b      	ldrb	r3, [r3, #4]
 800066c:	f003 0307 	and.w	r3, r3, #7
 8000670:	73fb      	strb	r3, [r7, #15]
		pGPIO_Handle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2)) ;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	7c3a      	ldrb	r2, [r7, #16]
 8000678:	3208      	adds	r2, #8
 800067a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	009b      	lsls	r3, r3, #2
 8000682:	220f      	movs	r2, #15
 8000684:	fa02 f303 	lsl.w	r3, r2, r3
 8000688:	43db      	mvns	r3, r3
 800068a:	4618      	mov	r0, r3
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	7c3a      	ldrb	r2, [r7, #16]
 8000692:	4001      	ands	r1, r0
 8000694:	3208      	adds	r2, #8
 8000696:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIO_Handle->pGPIOx->AFR[temp1] |= (pGPIO_Handle->GPIO_PIN_CONFIG.GPIO_Pin_AltFunc << (4 * temp2)) ;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	7c3a      	ldrb	r2, [r7, #16]
 80006a0:	3208      	adds	r2, #8
 80006a2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	7a5b      	ldrb	r3, [r3, #9]
 80006aa:	461a      	mov	r2, r3
 80006ac:	7bfb      	ldrb	r3, [r7, #15]
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	fa02 f303 	lsl.w	r3, r2, r3
 80006b4:	4618      	mov	r0, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	7c3a      	ldrb	r2, [r7, #16]
 80006bc:	4301      	orrs	r1, r0
 80006be:	3208      	adds	r2, #8
 80006c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80006c4:	bf00      	nop
 80006c6:	3718      	adds	r7, #24
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40013800 	.word	0x40013800
 80006d0:	40013c00 	.word	0x40013c00

080006d4 <GPIO_Read_Pin>:
 *@return					: State is either H or L then return type should be bool or uint8_t
 *
 *@note						: None
 *
 */
uint8_t GPIO_Read_Pin(GPIO_RegDef_t *pGPIO, uint8_t number){
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	460b      	mov	r3, r1
 80006de:	70fb      	strb	r3, [r7, #3]
	return (uint8_t)((pGPIO->IDR >> number) & 0x00000001 );
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	691a      	ldr	r2, [r3, #16]
 80006e4:	78fb      	ldrb	r3, [r7, #3]
 80006e6:	fa22 f303 	lsr.w	r3, r2, r3
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	f003 0301 	and.w	r3, r3, #1
 80006f0:	b2db      	uxtb	r3, r3
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr

080006fe <GPIO_Write_Pin>:
 *@return					: None
 *
 *@note						: None
 *
 */
void GPIO_Write_Pin(GPIO_RegDef_t *pGPIO, uint8_t number, uint8_t value) {
 80006fe:	b480      	push	{r7}
 8000700:	b083      	sub	sp, #12
 8000702:	af00      	add	r7, sp, #0
 8000704:	6078      	str	r0, [r7, #4]
 8000706:	460b      	mov	r3, r1
 8000708:	70fb      	strb	r3, [r7, #3]
 800070a:	4613      	mov	r3, r2
 800070c:	70bb      	strb	r3, [r7, #2]
    if (value)
 800070e:	78bb      	ldrb	r3, [r7, #2]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d009      	beq.n	8000728 <GPIO_Write_Pin+0x2a>
        pGPIO->ODR |= (1 << number);  // Set bit (1)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	695b      	ldr	r3, [r3, #20]
 8000718:	78fa      	ldrb	r2, [r7, #3]
 800071a:	2101      	movs	r1, #1
 800071c:	fa01 f202 	lsl.w	r2, r1, r2
 8000720:	431a      	orrs	r2, r3
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	615a      	str	r2, [r3, #20]
    else
        pGPIO->ODR &= ~(1 << number); // Clear bit (0)
}
 8000726:	e009      	b.n	800073c <GPIO_Write_Pin+0x3e>
        pGPIO->ODR &= ~(1 << number); // Clear bit (0)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	695b      	ldr	r3, [r3, #20]
 800072c:	78fa      	ldrb	r2, [r7, #3]
 800072e:	2101      	movs	r1, #1
 8000730:	fa01 f202 	lsl.w	r2, r1, r2
 8000734:	43d2      	mvns	r2, r2
 8000736:	401a      	ands	r2, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	615a      	str	r2, [r3, #20]
}
 800073c:	bf00      	nop
 800073e:	370c      	adds	r7, #12
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr

08000748 <GPIO_Toggle_Output>:
 *@return					: None
 *
 *@note						: None
 *
 */
void GPIO_Toggle_Output(GPIO_RegDef_t *pGPIO, uint8_t number){
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	460b      	mov	r3, r1
 8000752:	70fb      	strb	r3, [r7, #3]
	pGPIO->ODR ^= (1 << number);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	695b      	ldr	r3, [r3, #20]
 8000758:	78fa      	ldrb	r2, [r7, #3]
 800075a:	2101      	movs	r1, #1
 800075c:	fa01 f202 	lsl.w	r2, r1, r2
 8000760:	405a      	eors	r2, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	615a      	str	r2, [r3, #20]
}
 8000766:	bf00      	nop
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
	...

08000774 <delay>:

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void delay(){
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 5000000/4; i++);
 800077a:	2300      	movs	r3, #0
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	e002      	b.n	8000786 <delay+0x12>
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	3301      	adds	r3, #1
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	4a04      	ldr	r2, [pc, #16]	@ (800079c <delay+0x28>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d9f8      	bls.n	8000780 <delay+0xc>
}
 800078e:	bf00      	nop
 8000790:	bf00      	nop
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	001312cf 	.word	0x001312cf

080007a0 <main>:

int main(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af00      	add	r7, sp, #0
	//==============================================================================================================================
	//CASE 4: USE BUTTON (1 INPUT 1 OUTPUT) connect button and led outside
	GPIO_HAL GPIOBtn; // PA10 : ONBOARD BUTTON
	GPIO_HAL LB8;

	LB8.pGPIOx = GPIOB;
 80007a6:	4b19      	ldr	r3, [pc, #100]	@ (800080c <main+0x6c>)
 80007a8:	603b      	str	r3, [r7, #0]
	LB8.GPIO_PIN_CONFIG.GPIO_Pin_mode = GPIO_MODE_OUTPUT;
 80007aa:	2301      	movs	r3, #1
 80007ac:	717b      	strb	r3, [r7, #5]
	LB8.GPIO_PIN_CONFIG.GPIO_Pin_num = GPIO_PIN_13;
 80007ae:	230d      	movs	r3, #13
 80007b0:	713b      	strb	r3, [r7, #4]
	LB8.GPIO_PIN_CONFIG.GPIO_Pin_speed = GPIO_SPEED_H;
 80007b2:	2302      	movs	r3, #2
 80007b4:	71bb      	strb	r3, [r7, #6]
	LB8.GPIO_PIN_CONFIG.GPIO_Pin_OUTPUT_TYPE = GPIO_MODE_OUTPUT_PP;
 80007b6:	2300      	movs	r3, #0
 80007b8:	723b      	strb	r3, [r7, #8]
	LB8.GPIO_PIN_CONFIG.GPIO_Pin_PuPdCONTROL = GPIO_PUPD_DIS;
 80007ba:	2300      	movs	r3, #0
 80007bc:	71fb      	strb	r3, [r7, #7]
	// Select port mode speed
	GPIOBtn.pGPIOx = GPIOA;
 80007be:	4b14      	ldr	r3, [pc, #80]	@ (8000810 <main+0x70>)
 80007c0:	60fb      	str	r3, [r7, #12]
	GPIOBtn.GPIO_PIN_CONFIG.GPIO_Pin_mode = GPIO_MODE_INPUT;
 80007c2:	2300      	movs	r3, #0
 80007c4:	747b      	strb	r3, [r7, #17]
	GPIOBtn.GPIO_PIN_CONFIG.GPIO_Pin_num = GPIO_PIN_0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	743b      	strb	r3, [r7, #16]
	GPIOBtn.GPIO_PIN_CONFIG.GPIO_Pin_speed = GPIO_SPEED_H;
 80007ca:	2302      	movs	r3, #2
 80007cc:	74bb      	strb	r3, [r7, #18]
	//LD14.GPIO_PIN_CONFIG.GPIO_Pin_OUTPUT_TYPE = GPIO_MODE_OUTPUT_OD;
	GPIOBtn.GPIO_PIN_CONFIG.GPIO_Pin_PuPdCONTROL = GPIO_PUPD_DIS;
 80007ce:	2300      	movs	r3, #0
 80007d0:	74fb      	strb	r3, [r7, #19]
	// CLK already ENABLE WHEN CALL GPIO_Init
	GPIO_Init(&LB8);
 80007d2:	463b      	mov	r3, r7
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff fddf 	bl	8000398 <GPIO_Init>
	GPIO_Init(&GPIOBtn);
 80007da:	f107 030c 	add.w	r3, r7, #12
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff fdda 	bl	8000398 <GPIO_Init>

	GPIO_Write_Pin(GPIOB, GPIO_PIN_8, SET);
 80007e4:	2201      	movs	r2, #1
 80007e6:	2108      	movs	r1, #8
 80007e8:	4808      	ldr	r0, [pc, #32]	@ (800080c <main+0x6c>)
 80007ea:	f7ff ff88 	bl	80006fe <GPIO_Write_Pin>
	while(1){
		delay();
 80007ee:	f7ff ffc1 	bl	8000774 <delay>
		if(GPIO_Read_Pin(GPIOA, GPIO_PIN_10)) // pressed is 1
 80007f2:	210a      	movs	r1, #10
 80007f4:	4806      	ldr	r0, [pc, #24]	@ (8000810 <main+0x70>)
 80007f6:	f7ff ff6d 	bl	80006d4 <GPIO_Read_Pin>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d0f6      	beq.n	80007ee <main+0x4e>
			GPIO_Toggle_Output(GPIOB, GPIO_PIN_8);
 8000800:	2108      	movs	r1, #8
 8000802:	4802      	ldr	r0, [pc, #8]	@ (800080c <main+0x6c>)
 8000804:	f7ff ffa0 	bl	8000748 <GPIO_Toggle_Output>
		delay();
 8000808:	e7f1      	b.n	80007ee <main+0x4e>
 800080a:	bf00      	nop
 800080c:	40020400 	.word	0x40020400
 8000810:	40020000 	.word	0x40020000

08000814 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000814:	480d      	ldr	r0, [pc, #52]	@ (800084c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000816:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000818:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800081c:	480c      	ldr	r0, [pc, #48]	@ (8000850 <LoopForever+0x6>)
  ldr r1, =_edata
 800081e:	490d      	ldr	r1, [pc, #52]	@ (8000854 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000820:	4a0d      	ldr	r2, [pc, #52]	@ (8000858 <LoopForever+0xe>)
  movs r3, #0
 8000822:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000824:	e002      	b.n	800082c <LoopCopyDataInit>

08000826 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000826:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000828:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800082a:	3304      	adds	r3, #4

0800082c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800082c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800082e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000830:	d3f9      	bcc.n	8000826 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000832:	4a0a      	ldr	r2, [pc, #40]	@ (800085c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000834:	4c0a      	ldr	r4, [pc, #40]	@ (8000860 <LoopForever+0x16>)
  movs r3, #0
 8000836:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000838:	e001      	b.n	800083e <LoopFillZerobss>

0800083a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800083a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800083c:	3204      	adds	r2, #4

0800083e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800083e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000840:	d3fb      	bcc.n	800083a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000842:	f000 f811 	bl	8000868 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000846:	f7ff ffab 	bl	80007a0 <main>

0800084a <LoopForever>:

LoopForever:
  b LoopForever
 800084a:	e7fe      	b.n	800084a <LoopForever>
  ldr   r0, =_estack
 800084c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000850:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000854:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000858:	080008d0 	.word	0x080008d0
  ldr r2, =_sbss
 800085c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000860:	2000001c 	.word	0x2000001c

08000864 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000864:	e7fe      	b.n	8000864 <ADC_IRQHandler>
	...

08000868 <__libc_init_array>:
 8000868:	b570      	push	{r4, r5, r6, lr}
 800086a:	4d0d      	ldr	r5, [pc, #52]	@ (80008a0 <__libc_init_array+0x38>)
 800086c:	4c0d      	ldr	r4, [pc, #52]	@ (80008a4 <__libc_init_array+0x3c>)
 800086e:	1b64      	subs	r4, r4, r5
 8000870:	10a4      	asrs	r4, r4, #2
 8000872:	2600      	movs	r6, #0
 8000874:	42a6      	cmp	r6, r4
 8000876:	d109      	bne.n	800088c <__libc_init_array+0x24>
 8000878:	4d0b      	ldr	r5, [pc, #44]	@ (80008a8 <__libc_init_array+0x40>)
 800087a:	4c0c      	ldr	r4, [pc, #48]	@ (80008ac <__libc_init_array+0x44>)
 800087c:	f000 f818 	bl	80008b0 <_init>
 8000880:	1b64      	subs	r4, r4, r5
 8000882:	10a4      	asrs	r4, r4, #2
 8000884:	2600      	movs	r6, #0
 8000886:	42a6      	cmp	r6, r4
 8000888:	d105      	bne.n	8000896 <__libc_init_array+0x2e>
 800088a:	bd70      	pop	{r4, r5, r6, pc}
 800088c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000890:	4798      	blx	r3
 8000892:	3601      	adds	r6, #1
 8000894:	e7ee      	b.n	8000874 <__libc_init_array+0xc>
 8000896:	f855 3b04 	ldr.w	r3, [r5], #4
 800089a:	4798      	blx	r3
 800089c:	3601      	adds	r6, #1
 800089e:	e7f2      	b.n	8000886 <__libc_init_array+0x1e>
 80008a0:	080008c8 	.word	0x080008c8
 80008a4:	080008c8 	.word	0x080008c8
 80008a8:	080008c8 	.word	0x080008c8
 80008ac:	080008cc 	.word	0x080008cc

080008b0 <_init>:
 80008b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008b2:	bf00      	nop
 80008b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008b6:	bc08      	pop	{r3}
 80008b8:	469e      	mov	lr, r3
 80008ba:	4770      	bx	lr

080008bc <_fini>:
 80008bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008be:	bf00      	nop
 80008c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008c2:	bc08      	pop	{r3}
 80008c4:	469e      	mov	lr, r3
 80008c6:	4770      	bx	lr
